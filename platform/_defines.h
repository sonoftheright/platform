#ifdef PLATFORM_USE_OPENGL

// #define GL_2D 0x0600
// #define GL_2_BYTES 0x1407
// #define GL_3D 0x0601
// #define GL_3D_COLOR 0x0602
// #define GL_3D_COLOR_TEXTURE 0x0603
// #define GL_3_BYTES 0x1408
// #define GL_4D_COLOR_TEXTURE 0x0604
// #define GL_4_BYTES 0x1409
// #define GL_ACCUM 0x0100
// #define GL_ACCUM_ALPHA_BITS 0x0D5B
// #define GL_ACCUM_BLUE_BITS 0x0D5A
// #define GL_ACCUM_BUFFER_BIT 0x00000200
// #define GL_ACCUM_CLEAR_VALUE 0x0B80
// #define GL_ACCUM_GREEN_BITS 0x0D59
// #define GL_ACCUM_RED_BITS 0x0D58
// #define GL_ACTIVE_ATTRIBUTES 0x8B89
// #define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
// #define GL_ACTIVE_TEXTURE 0x84E0
// #define GL_ACTIVE_UNIFORMS 0x8B86
// #define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
// #define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
// #define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
// #define GL_ADD 0x0104
// #define GL_ADD_SIGNED 0x8574
// #define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
// #define GL_ALIASED_POINT_SIZE_RANGE 0x846D
// // #define GL_ALL_ATTRIB_BITS 0xFFFFFFFF // defined in <GL/gl.h>
// #define GL_ALPHA 0x1906
// #define GL_ALPHA12 0x803D
// #define GL_ALPHA16 0x803E
// #define GL_ALPHA4 0x803B
// #define GL_ALPHA8 0x803C
// #define GL_ALPHA_BIAS 0x0D1D
// #define GL_ALPHA_BITS 0x0D55
// #define GL_ALPHA_INTEGER 0x8D97
// #define GL_ALPHA_SCALE 0x0D1C
// #define GL_ALPHA_TEST 0x0BC0
// #define GL_ALPHA_TEST_FUNC 0x0BC1
// #define GL_ALPHA_TEST_REF 0x0BC2
// #define GL_ALREADY_SIGNALED 0x911A
// #define GL_ALWAYS 0x0207
// #define GL_AMBIENT 0x1200
// #define GL_AMBIENT_AND_DIFFUSE 0x1602
// #define GL_AND 0x1501
// #define GL_AND_INVERTED 0x1504
// #define GL_AND_REVERSE 0x1502
// #define GL_ANY_SAMPLES_PASSED 0x8C2F
// #define GL_ARRAY_BUFFER 0x8892
// #define GL_ARRAY_BUFFER_BINDING 0x8894
// #define GL_ATTACHED_SHADERS 0x8B85
// #define GL_ATTRIB_STACK_DEPTH 0x0BB0
// #define GL_AUTO_NORMAL 0x0D80
// #define GL_AUX0 0x0409
// #define GL_AUX1 0x040A
// #define GL_AUX2 0x040B
// #define GL_AUX3 0x040C
// #define GL_AUX_BUFFERS 0x0C00
// #define GL_BACK 0x0405
// #define GL_BACK_LEFT 0x0402
// #define GL_BACK_RIGHT 0x0403
// #define GL_BGR 0x80E0
// #define GL_BGRA 0x80E1
// #define GL_BGRA_INTEGER 0x8D9B
// #define GL_BGR_INTEGER 0x8D9A
// #define GL_BITMAP 0x1A00
// #define GL_BITMAP_TOKEN 0x0704
// #define GL_BLEND 0x0BE2
// #define GL_BLEND_COLOR 0x8005
// #define GL_BLEND_DST 0x0BE0
// #define GL_BLEND_DST_ALPHA 0x80CA
// #define GL_BLEND_DST_RGB 0x80C8
// #define GL_BLEND_EQUATION 0x8009
// #define GL_BLEND_EQUATION_ALPHA 0x883D
// #define GL_BLEND_EQUATION_RGB 0x8009
// #define GL_BLEND_SRC 0x0BE1
// #define GL_BLEND_SRC_ALPHA 0x80CB
// #define GL_BLEND_SRC_RGB 0x80C9
// #define GL_BLUE 0x1905
// #define GL_BLUE_BIAS 0x0D1B
// #define GL_BLUE_BITS 0x0D54
// #define GL_BLUE_INTEGER 0x8D96
// #define GL_BLUE_SCALE 0x0D1A
// #define GL_BOOL 0x8B56
// #define GL_BOOL_VEC2 0x8B57
// #define GL_BOOL_VEC3 0x8B58
// #define GL_BOOL_VEC4 0x8B59
// #define GL_BUFFER 0x82E0
// #define GL_BUFFER_ACCESS 0x88BB
// #define GL_BUFFER_ACCESS_FLAGS 0x911F
// #define GL_BUFFER_MAPPED 0x88BC
// #define GL_BUFFER_MAP_LENGTH 0x9120
// #define GL_BUFFER_MAP_OFFSET 0x9121
// #define GL_BUFFER_MAP_POINTER 0x88BD
// #define GL_BUFFER_SIZE 0x8764
// #define GL_BUFFER_USAGE 0x8765
// #define GL_BYTE 0x1400
// #define GL_C3F_V3F 0x2A24
// #define GL_C4F_N3F_V3F 0x2A26
// #define GL_C4UB_V2F 0x2A22
// #define GL_C4UB_V3F 0x2A23
// #define GL_CCW 0x0901
// #define GL_CLAMP 0x2900
// #define GL_CLAMP_FRAGMENT_COLOR 0x891B
// #define GL_CLAMP_READ_COLOR 0x891C
// #define GL_CLAMP_TO_BORDER 0x812D
// #define GL_CLAMP_TO_EDGE 0x812F
// #define GL_CLAMP_VERTEX_COLOR 0x891A
// #define GL_CLEAR 0x1500
// #define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
// // #define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF // defined in <GL/gl.h>
// #define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
// #define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
// #define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
// #define GL_CLIP_DISTANCE0 0x3000
// #define GL_CLIP_DISTANCE1 0x3001
// #define GL_CLIP_DISTANCE2 0x3002
// #define GL_CLIP_DISTANCE3 0x3003
// #define GL_CLIP_DISTANCE4 0x3004
// #define GL_CLIP_DISTANCE5 0x3005
// #define GL_CLIP_DISTANCE6 0x3006
// #define GL_CLIP_DISTANCE7 0x3007
// #define GL_CLIP_PLANE0 0x3000
// #define GL_CLIP_PLANE1 0x3001
// #define GL_CLIP_PLANE2 0x3002
// #define GL_CLIP_PLANE3 0x3003
// #define GL_CLIP_PLANE4 0x3004
// #define GL_CLIP_PLANE5 0x3005
// #define GL_COEFF 0x0A00
// #define GL_COLOR 0x1800
// #define GL_COLOR_ARRAY 0x8076
// #define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
// #define GL_COLOR_ARRAY_POINTER 0x8090
// #define GL_COLOR_ARRAY_SIZE 0x8081
// #define GL_COLOR_ARRAY_STRIDE 0x8083
// #define GL_COLOR_ARRAY_TYPE 0x8082
// #define GL_COLOR_ATTACHMENT0 0x8CE0
// #define GL_COLOR_ATTACHMENT1 0x8CE1
// #define GL_COLOR_ATTACHMENT10 0x8CEA
// #define GL_COLOR_ATTACHMENT11 0x8CEB
// #define GL_COLOR_ATTACHMENT12 0x8CEC
// #define GL_COLOR_ATTACHMENT13 0x8CED
// #define GL_COLOR_ATTACHMENT14 0x8CEE
// #define GL_COLOR_ATTACHMENT15 0x8CEF
// #define GL_COLOR_ATTACHMENT16 0x8CF0
// #define GL_COLOR_ATTACHMENT17 0x8CF1
// #define GL_COLOR_ATTACHMENT18 0x8CF2
// #define GL_COLOR_ATTACHMENT19 0x8CF3
// #define GL_COLOR_ATTACHMENT2 0x8CE2
// #define GL_COLOR_ATTACHMENT20 0x8CF4
// #define GL_COLOR_ATTACHMENT21 0x8CF5
// #define GL_COLOR_ATTACHMENT22 0x8CF6
// #define GL_COLOR_ATTACHMENT23 0x8CF7
// #define GL_COLOR_ATTACHMENT24 0x8CF8
// #define GL_COLOR_ATTACHMENT25 0x8CF9
// #define GL_COLOR_ATTACHMENT26 0x8CFA
// #define GL_COLOR_ATTACHMENT27 0x8CFB
// #define GL_COLOR_ATTACHMENT28 0x8CFC
// #define GL_COLOR_ATTACHMENT29 0x8CFD
// #define GL_COLOR_ATTACHMENT3 0x8CE3
// #define GL_COLOR_ATTACHMENT30 0x8CFE
// #define GL_COLOR_ATTACHMENT31 0x8CFF
// #define GL_COLOR_ATTACHMENT4 0x8CE4
// #define GL_COLOR_ATTACHMENT5 0x8CE5
// #define GL_COLOR_ATTACHMENT6 0x8CE6
// #define GL_COLOR_ATTACHMENT7 0x8CE7
// #define GL_COLOR_ATTACHMENT8 0x8CE8
// #define GL_COLOR_ATTACHMENT9 0x8CE9
// #define GL_COLOR_BUFFER_BIT 0x00004000
// #define GL_COLOR_CLEAR_VALUE 0x0C22
// #define GL_COLOR_INDEX 0x1900
// #define GL_COLOR_INDEXES 0x1603
// #define GL_COLOR_LOGIC_OP 0x0BF2
// #define GL_COLOR_MATERIAL 0x0B57
// #define GL_COLOR_MATERIAL_FACE 0x0B55
// #define GL_COLOR_MATERIAL_PARAMETER 0x0B56
// #define GL_COLOR_SUM 0x8458
// #define GL_COLOR_WRITEMASK 0x0C23
// #define GL_COMBINE 0x8570
// #define GL_COMBINE_ALPHA 0x8572
// #define GL_COMBINE_RGB 0x8571
// #define GL_COMPARE_REF_TO_TEXTURE 0x884E
// #define GL_COMPARE_R_TO_TEXTURE 0x884E
// #define GL_COMPILE 0x1300
// #define GL_COMPILE_AND_EXECUTE 0x1301
// #define GL_COMPILE_STATUS 0x8B81
// #define GL_COMPRESSED_ALPHA 0x84E9
// #define GL_COMPRESSED_INTENSITY 0x84EC
// #define GL_COMPRESSED_LUMINANCE 0x84EA
// #define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
// #define GL_COMPRESSED_RED 0x8225
// #define GL_COMPRESSED_RED_RGTC1 0x8DBB
// #define GL_COMPRESSED_RG 0x8226
// #define GL_COMPRESSED_RGB 0x84ED
// #define GL_COMPRESSED_RGBA 0x84EE
// #define GL_COMPRESSED_RG_RGTC2 0x8DBD
// #define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
// #define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
// #define GL_COMPRESSED_SLUMINANCE 0x8C4A
// #define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
// #define GL_COMPRESSED_SRGB 0x8C48
// #define GL_COMPRESSED_SRGB_ALPHA 0x8C49
// #define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
// #define GL_CONDITION_SATISFIED 0x911C
// #define GL_CONSTANT 0x8576
// #define GL_CONSTANT_ALPHA 0x8003
// #define GL_CONSTANT_ATTENUATION 0x1207
// #define GL_CONSTANT_COLOR 0x8001
// #define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
// #define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
// #define GL_CONTEXT_FLAGS 0x821E
// #define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
// #ifdef _WIN32
// #define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001 // predefined in <OpenGL/gl3.h>
// #endif
// #define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
// #define GL_CONTEXT_PROFILE_MASK 0x9126
// #define GL_COORD_REPLACE 0x8862
// #define GL_COPY 0x1503
// #define GL_COPY_INVERTED 0x150C
// #define GL_COPY_PIXEL_TOKEN 0x0706
// #define GL_COPY_READ_BUFFER 0x8F36
// #define GL_COPY_WRITE_BUFFER 0x8F37
// #define GL_CULL_FACE 0x0B44
// #define GL_CULL_FACE_MODE 0x0B45
// #define GL_CURRENT_BIT 0x00000001
// #define GL_CURRENT_COLOR 0x0B00
// #define GL_CURRENT_FOG_COORD 0x8453
// #define GL_CURRENT_FOG_COORDINATE 0x8453
// #define GL_CURRENT_INDEX 0x0B01
// #define GL_CURRENT_NORMAL 0x0B02
// #define GL_CURRENT_PROGRAM 0x8B8D
// #define GL_CURRENT_QUERY 0x8865
// #define GL_CURRENT_RASTER_COLOR 0x0B04
// #define GL_CURRENT_RASTER_DISTANCE 0x0B09
// #define GL_CURRENT_RASTER_INDEX 0x0B05
// #define GL_CURRENT_RASTER_POSITION 0x0B07
// #define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
// #define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
// #define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
// #define GL_CURRENT_SECONDARY_COLOR 0x8459
// #define GL_CURRENT_TEXTURE_COORDS 0x0B03
// #define GL_CURRENT_VERTEX_ATTRIB 0x8626
// #define GL_CW 0x0900
// #define GL_DEBUG_CALLBACK_FUNCTION 0x8244
// #define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
// #define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
// #define GL_DEBUG_LOGGED_MESSAGES 0x9145
// #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
// #define GL_DEBUG_OUTPUT 0x92E0
// #define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
// #define GL_DEBUG_SEVERITY_HIGH 0x9146
// #define GL_DEBUG_SEVERITY_LOW 0x9148
// #define GL_DEBUG_SEVERITY_MEDIUM 0x9147
// #define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
// #define GL_DEBUG_SOURCE_API 0x8246
// #define GL_DEBUG_SOURCE_APPLICATION 0x824A
// #define GL_DEBUG_SOURCE_OTHER 0x824B
// #define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
// #define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
// #define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
// #define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
// #define GL_DEBUG_TYPE_ERROR 0x824C
// #define GL_DEBUG_TYPE_MARKER 0x8268
// #define GL_DEBUG_TYPE_OTHER 0x8251
// #define GL_DEBUG_TYPE_PERFORMANCE 0x8250
// #define GL_DEBUG_TYPE_POP_GROUP 0x826A
// #define GL_DEBUG_TYPE_PORTABILITY 0x824F
// #define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
// #define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
// #define GL_DECAL 0x2101
// #define GL_DECR 0x1E03
// #define GL_DECR_WRAP 0x8508
// #define GL_DELETE_STATUS 0x8B80
// #define GL_DEPTH 0x1801
// #define GL_DEPTH24_STENCIL8 0x88F0
// #define GL_DEPTH32F_STENCIL8 0x8CAD
// #define GL_DEPTH_ATTACHMENT 0x8D00
// #define GL_DEPTH_BIAS 0x0D1F
// #define GL_DEPTH_BITS 0x0D56
// #define GL_DEPTH_BUFFER_BIT 0x00000100
// #define GL_DEPTH_CLAMP 0x864F
// #define GL_DEPTH_CLEAR_VALUE 0x0B73
// #define GL_DEPTH_COMPONENT 0x1902
// #define GL_DEPTH_COMPONENT16 0x81A5
// #define GL_DEPTH_COMPONENT24 0x81A6
// #define GL_DEPTH_COMPONENT32 0x81A7
// #define GL_DEPTH_COMPONENT32F 0x8CAC
// #define GL_DEPTH_FUNC 0x0B74
// #define GL_DEPTH_RANGE 0x0B70
// #define GL_DEPTH_SCALE 0x0D1E
// #define GL_DEPTH_STENCIL 0x84F9
// #define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
// #define GL_DEPTH_TEST 0x0B71
// #define GL_DEPTH_TEXTURE_MODE 0x884B
// #define GL_DEPTH_WRITEMASK 0x0B72
// #define GL_DIFFUSE 0x1201
// #define GL_DISPLAY_LIST 0x82E7
// #define GL_DITHER 0x0BD0
// #define GL_DOMAIN 0x0A02
// #define GL_DONT_CARE 0x1100
// #define GL_DOT3_RGB 0x86AE
// #define GL_DOT3_RGBA 0x86AF
// #define GL_DOUBLE 0x140A
// #define GL_DOUBLEBUFFER 0x0C32
// #define GL_DRAW_BUFFER 0x0C01
// #define GL_DRAW_BUFFER0 0x8825
// #define GL_DRAW_BUFFER1 0x8826
// #define GL_DRAW_BUFFER10 0x882F
// #define GL_DRAW_BUFFER11 0x8830
// #define GL_DRAW_BUFFER12 0x8831
// #define GL_DRAW_BUFFER13 0x8832
// #define GL_DRAW_BUFFER14 0x8833
// #define GL_DRAW_BUFFER15 0x8834
// #define GL_DRAW_BUFFER2 0x8827
// #define GL_DRAW_BUFFER3 0x8828
// #define GL_DRAW_BUFFER4 0x8829
// #define GL_DRAW_BUFFER5 0x882A
// #define GL_DRAW_BUFFER6 0x882B
// #define GL_DRAW_BUFFER7 0x882C
// #define GL_DRAW_BUFFER8 0x882D
// #define GL_DRAW_BUFFER9 0x882E
// #define GL_DRAW_FRAMEBUFFER 0x8CA9
// #ifdef _WIN32
// #define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6 // defined in <OpenGL/gl3.h>
// #endif
// #define GL_DRAW_PIXEL_TOKEN 0x0705
// #define GL_DST_ALPHA 0x0304
// #define GL_DST_COLOR 0x0306
// #define GL_DYNAMIC_COPY 0x88EA
// #define GL_DYNAMIC_DRAW 0x88E8
// #define GL_DYNAMIC_READ 0x88E9
// #define GL_EDGE_FLAG 0x0B43
// #define GL_EDGE_FLAG_ARRAY 0x8079
// #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
// #define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
// #define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
// #define GL_ELEMENT_ARRAY_BUFFER 0x8893
// #define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
// #define GL_EMISSION 0x1600
// #define GL_ENABLE_BIT 0x00002000
// #define GL_EQUAL 0x0202
// #define GL_EQUIV 0x1509
// #define GL_EVAL_BIT 0x00010000
// #define GL_EXP 0x0800
// #define GL_EXP2 0x0801
// #define GL_EXTENSIONS 0x1F03
// #define GL_EYE_LINEAR 0x2400
// #define GL_EYE_PLANE 0x2502
// #define GL_FALSE 0
// #define GL_FASTEST 0x1101
// #define GL_FEEDBACK 0x1C01
// #define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
// #define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
// #define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
// #define GL_FILL 0x1B02
// #define GL_FIRST_VERTEX_CONVENTION 0x8E4D
// #define GL_FIXED_ONLY 0x891D
// #define GL_FLAT 0x1D00
// #define GL_FLOAT 0x1406
// #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
// #define GL_FLOAT_MAT2 0x8B5A
// #define GL_FLOAT_MAT2x3 0x8B65
// #define GL_FLOAT_MAT2x4 0x8B66
// #define GL_FLOAT_MAT3 0x8B5B
// #define GL_FLOAT_MAT3x2 0x8B67
// #define GL_FLOAT_MAT3x4 0x8B68
// #define GL_FLOAT_MAT4 0x8B5C
// #define GL_FLOAT_MAT4x2 0x8B69
// #define GL_FLOAT_MAT4x3 0x8B6A
// #define GL_FLOAT_VEC2 0x8B50
// #define GL_FLOAT_VEC3 0x8B51
// #define GL_FLOAT_VEC4 0x8B52
// #define GL_FOG 0x0B60
// #define GL_FOG_BIT 0x00000080
// #define GL_FOG_COLOR 0x0B66
// #define GL_FOG_COORD 0x8451
// #define GL_FOG_COORDINATE 0x8451
// #define GL_FOG_COORDINATE_ARRAY 0x8457
// #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
// #define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
// #define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
// #define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
// #define GL_FOG_COORDINATE_SOURCE 0x8450
// #define GL_FOG_COORD_ARRAY 0x8457
// #define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
// #define GL_FOG_COORD_ARRAY_POINTER 0x8456
// #define GL_FOG_COORD_ARRAY_STRIDE 0x8455
// #define GL_FOG_COORD_ARRAY_TYPE 0x8454
// #define GL_FOG_COORD_SRC 0x8450
// #define GL_FOG_DENSITY 0x0B62
// #define GL_FOG_END 0x0B64
// #define GL_FOG_HINT 0x0C54
// #define GL_FOG_INDEX 0x0B61
// #define GL_FOG_MODE 0x0B65
// #define GL_FOG_START 0x0B63
// #define GL_FRAGMENT_DEPTH 0x8452
// #define GL_FRAGMENT_SHADER 0x8B30
// #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
// #define GL_FRAMEBUFFER 0x8D40
// #define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
// #define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
// #define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
// #define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
// #define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
// #define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
// #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
// #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
// #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
// #define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
// #define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
// #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
// #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
// #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
// #define GL_FRAMEBUFFER_BINDING 0x8CA6
// #define GL_FRAMEBUFFER_COMPLETE 0x8CD5
// #define GL_FRAMEBUFFER_DEFAULT 0x8218
// #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
// #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
// #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
// #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
// #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
// #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
// #define GL_FRAMEBUFFER_SRGB 0x8DB9
// #define GL_FRAMEBUFFER_UNDEFINED 0x8219
// #define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
// #define GL_FRONT 0x0404
// #define GL_FRONT_AND_BACK 0x0408
// #define GL_FRONT_FACE 0x0B46
// #define GL_FRONT_LEFT 0x0400
// #define GL_FRONT_RIGHT 0x0401
// #define GL_FUNC_ADD 0x8006
// #define GL_FUNC_REVERSE_SUBTRACT 0x800B
// #define GL_FUNC_SUBTRACT 0x800A
// #define GL_GENERATE_MIPMAP 0x8191
// #define GL_GENERATE_MIPMAP_HINT 0x8192
// #define GL_GEOMETRY_INPUT_TYPE 0x8917
// #define GL_GEOMETRY_OUTPUT_TYPE 0x8918
// #define GL_GEOMETRY_SHADER 0x8DD9
// #define GL_GEOMETRY_VERTICES_OUT 0x8916
// #define GL_GEQUAL 0x0206
// #define GL_GREATER 0x0204
// #define GL_GREEN 0x1904
// #define GL_GREEN_BIAS 0x0D19
// #define GL_GREEN_BITS 0x0D53
// #define GL_GREEN_INTEGER 0x8D95
// #define GL_GREEN_SCALE 0x0D18
// #define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
// #define GL_HALF_FLOAT 0x140B
// #define GL_HINT_BIT 0x00008000
// #define GL_INCR 0x1E02
// #define GL_INCR_WRAP 0x8507
// #define GL_INDEX 0x8222
// #define GL_INDEX_ARRAY 0x8077
// #define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
// #define GL_INDEX_ARRAY_POINTER 0x8091
// #define GL_INDEX_ARRAY_STRIDE 0x8086
// #define GL_INDEX_ARRAY_TYPE 0x8085
// #define GL_INDEX_BITS 0x0D51
// #define GL_INDEX_CLEAR_VALUE 0x0C20
// #define GL_INDEX_LOGIC_OP 0x0BF1
// #define GL_INDEX_MODE 0x0C30
// #define GL_INDEX_OFFSET 0x0D13
// #define GL_INDEX_SHIFT 0x0D12
// #define GL_INDEX_WRITEMASK 0x0C21
// #define GL_INFO_LOG_LENGTH 0x8B84
// #define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
// #define GL_INT 0x1404
// #define GL_INTENSITY 0x8049
// #define GL_INTENSITY12 0x804C
// #define GL_INTENSITY16 0x804D
// #define GL_INTENSITY4 0x804A
// #define GL_INTENSITY8 0x804B
// #define GL_INTERLEAVED_ATTRIBS 0x8C8C
// #define GL_INTERPOLATE 0x8575
// #define GL_INT_2_10_10_10_REV 0x8D9F
// #define GL_INT_SAMPLER_1D 0x8DC9
// #define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
// #define GL_INT_SAMPLER_2D 0x8DCA
// #define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
// #define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
// #define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
// #define GL_INT_SAMPLER_2D_RECT 0x8DCD
// #define GL_INT_SAMPLER_3D 0x8DCB
// #define GL_INT_SAMPLER_BUFFER 0x8DD0
// #define GL_INT_SAMPLER_CUBE 0x8DCC
// #define GL_INT_VEC2 0x8B53
// #define GL_INT_VEC3 0x8B54
// #define GL_INT_VEC4 0x8B55
// #define GL_INVALID_ENUM 0x0500
// #define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
// #ifdef _WIN32
// #define GL_INVALID_INDEX 0xFFFFFFFF // predefined in <OpenGL/gl3.h>
// #endif
// #define GL_INVALID_OPERATION 0x0502
// #define GL_INVALID_VALUE 0x0501
// #define GL_INVERT 0x150A
// #define GL_KEEP 0x1E00
// #define GL_LAST_VERTEX_CONVENTION 0x8E4E
// #define GL_LEFT 0x0406
// #define GL_LEQUAL 0x0203
// #define GL_LESS 0x0201
// #define GL_LIGHT0 0x4000
// #define GL_LIGHT1 0x4001
// #define GL_LIGHT2 0x4002
// #define GL_LIGHT3 0x4003
// #define GL_LIGHT4 0x4004
// #define GL_LIGHT5 0x4005
// #define GL_LIGHT6 0x4006
// #define GL_LIGHT7 0x4007
// #define GL_LIGHTING 0x0B50
// #define GL_LIGHTING_BIT 0x00000040
// #define GL_LIGHT_MODEL_AMBIENT 0x0B53
// #define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
// #define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
// #define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
// #define GL_LINE 0x1B01
// #define GL_LINEAR 0x2601
// #define GL_LINEAR_ATTENUATION 0x1208
// #define GL_LINEAR_MIPMAP_LINEAR 0x2703
// #define GL_LINEAR_MIPMAP_NEAREST 0x2701
// #define GL_LINES 0x0001
// #define GL_LINES_ADJACENCY 0x000A
// #define GL_LINE_BIT 0x00000004
// #define GL_LINE_LOOP 0x0002
// #define GL_LINE_RESET_TOKEN 0x0707
// #define GL_LINE_SMOOTH 0x0B20
// #define GL_LINE_SMOOTH_HINT 0x0C52
// #define GL_LINE_STIPPLE 0x0B24
// #define GL_LINE_STIPPLE_PATTERN 0x0B25
// #define GL_LINE_STIPPLE_REPEAT 0x0B26
// #define GL_LINE_STRIP 0x0003
// #define GL_LINE_STRIP_ADJACENCY 0x000B
// #define GL_LINE_TOKEN 0x0702
// #define GL_LINE_WIDTH 0x0B21
// #define GL_LINE_WIDTH_GRANULARITY 0x0B23
// #define GL_LINE_WIDTH_RANGE 0x0B22
// #define GL_LINK_STATUS 0x8B82
// #define GL_LIST_BASE 0x0B32
// #define GL_LIST_BIT 0x00020000
// #define GL_LIST_INDEX 0x0B33
// #define GL_LIST_MODE 0x0B30
// #define GL_LOAD 0x0101
// // #define GL_LOGIC_OP 0x0BF1 // defined in GL/gl.h for v1.0 & v1.1
// #define GL_LOGIC_OP_MODE 0x0BF0
// #define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
// #define GL_LOWER_LEFT 0x8CA1
// #define GL_LUMINANCE 0x1909
// #define GL_LUMINANCE12 0x8041
// #define GL_LUMINANCE12_ALPHA12 0x8047
// #define GL_LUMINANCE12_ALPHA4 0x8046
// #define GL_LUMINANCE16 0x8042
// #define GL_LUMINANCE16_ALPHA16 0x8048
// #define GL_LUMINANCE4 0x803F
// #define GL_LUMINANCE4_ALPHA4 0x8043
// #define GL_LUMINANCE6_ALPHA2 0x8044
// #define GL_LUMINANCE8 0x8040
// #define GL_LUMINANCE8_ALPHA8 0x8045
// #define GL_LUMINANCE_ALPHA 0x190A
// #define GL_MAJOR_VERSION 0x821B
// #define GL_MAP1_COLOR_4 0x0D90
// #define GL_MAP1_GRID_DOMAIN 0x0DD0
// #define GL_MAP1_GRID_SEGMENTS 0x0DD1
// #define GL_MAP1_INDEX 0x0D91
// #define GL_MAP1_NORMAL 0x0D92
// #define GL_MAP1_TEXTURE_COORD_1 0x0D93
// #define GL_MAP1_TEXTURE_COORD_2 0x0D94
// #define GL_MAP1_TEXTURE_COORD_3 0x0D95
// #define GL_MAP1_TEXTURE_COORD_4 0x0D96
// #define GL_MAP1_VERTEX_3 0x0D97
// #define GL_MAP1_VERTEX_4 0x0D98
// #define GL_MAP2_COLOR_4 0x0DB0
// #define GL_MAP2_GRID_DOMAIN 0x0DD2
// #define GL_MAP2_GRID_SEGMENTS 0x0DD3
// #define GL_MAP2_INDEX 0x0DB1
// #define GL_MAP2_NORMAL 0x0DB2
// #define GL_MAP2_TEXTURE_COORD_1 0x0DB3
// #define GL_MAP2_TEXTURE_COORD_2 0x0DB4
// #define GL_MAP2_TEXTURE_COORD_3 0x0DB5
// #define GL_MAP2_TEXTURE_COORD_4 0x0DB6
// #define GL_MAP2_VERTEX_3 0x0DB7
// #define GL_MAP2_VERTEX_4 0x0DB8
// #define GL_MAP_COLOR 0x0D10
// #define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
// #define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
// #define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
// #define GL_MAP_READ_BIT 0x0001
// #define GL_MAP_STENCIL 0x0D11
// #define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
// #define GL_MAP_WRITE_BIT 0x0002
// #define GL_MATRIX_MODE 0x0BA0
// #define GL_MAX 0x8008
// #define GL_MAX_3D_TEXTURE_SIZE 0x8073
// #define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
// #define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
// #define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
// #define GL_MAX_CLIP_DISTANCES 0x0D32
// #define GL_MAX_CLIP_PLANES 0x0D32
// #define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
// #define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
// #define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
// #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
// #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
// #define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
// #define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
// #define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
// #define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
// #define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
// #define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
// #define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
// #define GL_MAX_DRAW_BUFFERS 0x8824
// #define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
// #define GL_MAX_ELEMENTS_INDICES 0x80E9
// #define GL_MAX_ELEMENTS_VERTICES 0x80E8
// #define GL_MAX_EVAL_ORDER 0x0D30
// #define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
// #define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
// #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
// #define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
// #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
// #define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
// #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
// #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
// #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
// #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
// #define GL_MAX_INTEGER_SAMPLES 0x9110
// #define GL_MAX_LABEL_LENGTH 0x82E8
// #define GL_MAX_LIGHTS 0x0D31
// #define GL_MAX_LIST_NESTING 0x0B31
// #define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
// #define GL_MAX_NAME_STACK_DEPTH 0x0D37
// #define GL_MAX_PIXEL_MAP_TABLE 0x0D34
// #define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
// #define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
// #define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
// #define GL_MAX_RENDERBUFFER_SIZE 0x84E8
// #define GL_MAX_SAMPLES 0x8D57
// #define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
// #define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
// #define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
// #define GL_MAX_TEXTURE_COORDS 0x8871
// #define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
// #define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
// #define GL_MAX_TEXTURE_SIZE 0x0D33
// #define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
// #define GL_MAX_TEXTURE_UNITS 0x84E2
// #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
// #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
// #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
// #define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
// #define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
// #define GL_MAX_VARYING_COMPONENTS 0x8B4B
// #define GL_MAX_VARYING_FLOATS 0x8B4B
// #define GL_MAX_VERTEX_ATTRIBS 0x8869
// #define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
// #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
// #define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
// #define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
// #define GL_MAX_VIEWPORT_DIMS 0x0D3A
// #define GL_MIN 0x8007
// #define GL_MINOR_VERSION 0x821C
// #define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
// #define GL_MIRRORED_REPEAT 0x8370
// #define GL_MODELVIEW 0x1700
// #define GL_MODELVIEW_MATRIX 0x0BA6
// #define GL_MODELVIEW_STACK_DEPTH 0x0BA3
// #define GL_MODULATE 0x2100
// #define GL_MULT 0x0103
// #define GL_MULTISAMPLE 0x809D
// #define GL_MULTISAMPLE_ARB 0x809D
// #define GL_MULTISAMPLE_BIT 0x20000000
// #define GL_MULTISAMPLE_BIT_ARB 0x20000000
// #define GL_N3F_V3F 0x2A25
// #define GL_NAME_STACK_DEPTH 0x0D70
// #define GL_NAND 0x150E
// #define GL_NEAREST 0x2600
// #define GL_NEAREST_MIPMAP_LINEAR 0x2702
// #define GL_NEAREST_MIPMAP_NEAREST 0x2700
// #define GL_NEVER 0x0200
// #define GL_NICEST 0x1102
// #define GL_NONE 0
// #define GL_NOOP 0x1505
// #define GL_NOR 0x1508
// #define GL_NORMALIZE 0x0BA1
// #define GL_NORMAL_ARRAY 0x8075
// #define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
// #define GL_NORMAL_ARRAY_POINTER 0x808F
// #define GL_NORMAL_ARRAY_STRIDE 0x807F
// #define GL_NORMAL_ARRAY_TYPE 0x807E
// #define GL_NORMAL_MAP 0x8511
// #define GL_NOTEQUAL 0x0205
// #define GL_NO_ERROR 0
// #define GL_NO_RESET_NOTIFICATION_ARB 0x8261
// #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
// #define GL_NUM_EXTENSIONS 0x821D
// #define GL_OBJECT_LINEAR 0x2401
// #define GL_OBJECT_PLANE 0x2501
// #define GL_OBJECT_TYPE 0x9112
// #define GL_ONE 1
// #define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
// #define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
// #define GL_ONE_MINUS_DST_ALPHA 0x0305
// #define GL_ONE_MINUS_DST_COLOR 0x0307
// #define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
// #define GL_ONE_MINUS_SRC1_COLOR 0x88FA
// #define GL_ONE_MINUS_SRC_ALPHA 0x0303
// #define GL_ONE_MINUS_SRC_COLOR 0x0301
// #define GL_OPERAND0_ALPHA 0x8598
// #define GL_OPERAND0_RGB 0x8590
// #define GL_OPERAND1_ALPHA 0x8599
// #define GL_OPERAND1_RGB 0x8591
// #define GL_OPERAND2_ALPHA 0x859A
// #define GL_OPERAND2_RGB 0x8592
// #define GL_OR 0x1507
// #define GL_ORDER 0x0A01
// #define GL_OR_INVERTED 0x150D
// #define GL_OR_REVERSE 0x150B
// #define GL_OUT_OF_MEMORY 0x0505
// #define GL_PACK_ALIGNMENT 0x0D05
// #define GL_PACK_IMAGE_HEIGHT 0x806C
// #define GL_PACK_LSB_FIRST 0x0D01
// #define GL_PACK_ROW_LENGTH 0x0D02
// #define GL_PACK_SKIP_IMAGES 0x806B
// #define GL_PACK_SKIP_PIXELS 0x0D04
// #define GL_PACK_SKIP_ROWS 0x0D03
// #define GL_PACK_SWAP_BYTES 0x0D00
// #define GL_PASS_THROUGH_TOKEN 0x0700
// #define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
// #define GL_PIXEL_MAP_A_TO_A 0x0C79
// #define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
// #define GL_PIXEL_MAP_B_TO_B 0x0C78
// #define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
// #define GL_PIXEL_MAP_G_TO_G 0x0C77
// #define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
// #define GL_PIXEL_MAP_I_TO_A 0x0C75
// #define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
// #define GL_PIXEL_MAP_I_TO_B 0x0C74
// #define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
// #define GL_PIXEL_MAP_I_TO_G 0x0C73
// #define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
// #define GL_PIXEL_MAP_I_TO_I 0x0C70
// #define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
// #define GL_PIXEL_MAP_I_TO_R 0x0C72
// #define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
// #define GL_PIXEL_MAP_R_TO_R 0x0C76
// #define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
// #define GL_PIXEL_MAP_S_TO_S 0x0C71
// #define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
// #define GL_PIXEL_MODE_BIT 0x00000020
// #define GL_PIXEL_PACK_BUFFER 0x88EB
// #define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
// #define GL_PIXEL_UNPACK_BUFFER 0x88EC
// #define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
// #define GL_POINT 0x1B00
// #define GL_POINTS 0x0000
// #define GL_POINT_BIT 0x00000002
// #define GL_POINT_DISTANCE_ATTENUATION 0x8129
// #define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
// #define GL_POINT_SIZE 0x0B11
// #define GL_POINT_SIZE_GRANULARITY 0x0B13
// #define GL_POINT_SIZE_MAX 0x8127
// #define GL_POINT_SIZE_MIN 0x8126
// #define GL_POINT_SIZE_RANGE 0x0B12
// #define GL_POINT_SMOOTH 0x0B10
// #define GL_POINT_SMOOTH_HINT 0x0C51
// #define GL_POINT_SPRITE 0x8861
// #define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
// #define GL_POINT_TOKEN 0x0701
// #define GL_POLYGON 0x0009
// #define GL_POLYGON_BIT 0x00000008
// #define GL_POLYGON_MODE 0x0B40
// #define GL_POLYGON_OFFSET_FACTOR 0x8038
// #define GL_POLYGON_OFFSET_FILL 0x8037
// #define GL_POLYGON_OFFSET_LINE 0x2A02
// #define GL_POLYGON_OFFSET_POINT 0x2A01
// #define GL_POLYGON_OFFSET_UNITS 0x2A00
// #define GL_POLYGON_SMOOTH 0x0B41
// #define GL_POLYGON_SMOOTH_HINT 0x0C53
// #define GL_POLYGON_STIPPLE 0x0B42
// #define GL_POLYGON_STIPPLE_BIT 0x00000010
// #define GL_POLYGON_TOKEN 0x0703
// #define GL_POSITION 0x1203
// #define GL_PREVIOUS 0x8578
// #define GL_PRIMARY_COLOR 0x8577
// #define GL_PRIMITIVES_GENERATED 0x8C87
// #define GL_PRIMITIVE_RESTART 0x8F9D
// #define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
// #define GL_PROGRAM 0x82E2
// #define GL_PROGRAM_PIPELINE 0x82E4
// #define GL_PROGRAM_POINT_SIZE 0x8642
// #define GL_PROJECTION 0x1701
// #define GL_PROJECTION_MATRIX 0x0BA7
// #define GL_PROJECTION_STACK_DEPTH 0x0BA4
// #define GL_PROVOKING_VERTEX 0x8E4F
// #define GL_PROXY_TEXTURE_1D 0x8063
// #define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
// #define GL_PROXY_TEXTURE_2D 0x8064
// #define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
// #define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
// #define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
// #define GL_PROXY_TEXTURE_3D 0x8070
// #define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
// #define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
// #define GL_Q 0x2003
// #define GL_QUADRATIC_ATTENUATION 0x1209
// #define GL_QUADS 0x0007
// #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
// #define GL_QUAD_STRIP 0x0008
// #define GL_QUERY 0x82E3
// #define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
// #define GL_QUERY_BY_REGION_WAIT 0x8E15
// #define GL_QUERY_COUNTER_BITS 0x8864
// #define GL_QUERY_NO_WAIT 0x8E14
// #define GL_QUERY_RESULT 0x8866
// #define GL_QUERY_RESULT_AVAILABLE 0x8867
// #define GL_QUERY_WAIT 0x8E13
// #define GL_R 0x2002
// #define GL_R11F_G11F_B10F 0x8C3A
// #define GL_R16 0x822A
// #define GL_R16F 0x822D
// #define GL_R16I 0x8233
// #define GL_R16UI 0x8234
// #define GL_R16_SNORM 0x8F98
// #define GL_R32F 0x822E
// #define GL_R32I 0x8235
// #define GL_R32UI 0x8236
// #define GL_R3_G3_B2 0x2A10
// #define GL_R8 0x8229
// #define GL_R8I 0x8231
// #define GL_R8UI 0x8232
// #define GL_R8_SNORM 0x8F94
// #define GL_RASTERIZER_DISCARD 0x8C89
// #define GL_READ_BUFFER 0x0C02
// #define GL_READ_FRAMEBUFFER 0x8CA8
// #define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
// #define GL_READ_ONLY 0x88B8
// #define GL_READ_WRITE 0x88BA
// #define GL_RED 0x1903
// #define GL_RED_BIAS 0x0D15
// #define GL_RED_BITS 0x0D52
// #define GL_RED_INTEGER 0x8D94
// #define GL_RED_SCALE 0x0D14
// #define GL_REFLECTION_MAP 0x8512
// #define GL_RENDER 0x1C00
// #define GL_RENDERBUFFER 0x8D41
// #define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
// #define GL_RENDERBUFFER_BINDING 0x8CA7
// #define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
// #define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
// #define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
// #define GL_RENDERBUFFER_HEIGHT 0x8D43
// #define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
// #define GL_RENDERBUFFER_RED_SIZE 0x8D50
// #define GL_RENDERBUFFER_SAMPLES 0x8CAB
// #define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
// #define GL_RENDERBUFFER_WIDTH 0x8D42
// #define GL_RENDERER 0x1F01
// #define GL_RENDER_MODE 0x0C40
// #define GL_REPEAT 0x2901
// #define GL_REPLACE 0x1E01
// #define GL_RESCALE_NORMAL 0x803A
// #define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
// #define GL_RETURN 0x0102
// #define GL_RG 0x8227
// #define GL_RG16 0x822C
// #define GL_RG16F 0x822F
// #define GL_RG16I 0x8239
// #define GL_RG16UI 0x823A
// #define GL_RG16_SNORM 0x8F99
// #define GL_RG32F 0x8230
// #define GL_RG32I 0x823B
// #define GL_RG32UI 0x823C
// #define GL_RG8 0x822B
// #define GL_RG8I 0x8237
// #define GL_RG8UI 0x8238
// #define GL_RG8_SNORM 0x8F95
// #define GL_RGB 0x1907
// #define GL_RGB10 0x8052
// #define GL_RGB10_A2 0x8059
// #define GL_RGB10_A2UI 0x906F
// #define GL_RGB12 0x8053
// #define GL_RGB16 0x8054
// #define GL_RGB16F 0x881B
// #define GL_RGB16I 0x8D89
// #define GL_RGB16UI 0x8D77
// #define GL_RGB16_SNORM 0x8F9A
// #define GL_RGB32F 0x8815
// #define GL_RGB32I 0x8D83
// #define GL_RGB32UI 0x8D71
// #define GL_RGB4 0x804F
// #define GL_RGB5 0x8050
// #define GL_RGB5_A1 0x8057
// #define GL_RGB8 0x8051
// #define GL_RGB8I 0x8D8F
// #define GL_RGB8UI 0x8D7D
// #define GL_RGB8_SNORM 0x8F96
// #define GL_RGB9_E5 0x8C3D
// #define GL_RGBA 0x1908
// #define GL_RGBA12 0x805A
// #define GL_RGBA16 0x805B
// #define GL_RGBA16F 0x881A
// #define GL_RGBA16I 0x8D88
// #define GL_RGBA16UI 0x8D76
// #define GL_RGBA16_SNORM 0x8F9B
// #define GL_RGBA2 0x8055
// #define GL_RGBA32F 0x8814
// #define GL_RGBA32I 0x8D82
// #define GL_RGBA32UI 0x8D70
// #define GL_RGBA4 0x8056
// #define GL_RGBA8 0x8058
// #define GL_RGBA8I 0x8D8E
// #define GL_RGBA8UI 0x8D7C
// #define GL_RGBA8_SNORM 0x8F97
// #define GL_RGBA_INTEGER 0x8D99
// #define GL_RGBA_MODE 0x0C31
// #define GL_RGB_INTEGER 0x8D98
// #define GL_RGB_SCALE 0x8573
// #define GL_RG_INTEGER 0x8228
// #define GL_RIGHT 0x0407
// #define GL_S 0x2000
// #define GL_SAMPLER 0x82E6
// #define GL_SAMPLER_1D 0x8B5D
// #define GL_SAMPLER_1D_ARRAY 0x8DC0
// #define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
// #define GL_SAMPLER_1D_SHADOW 0x8B61
// #define GL_SAMPLER_2D 0x8B5E
// #define GL_SAMPLER_2D_ARRAY 0x8DC1
// #define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
// #define GL_SAMPLER_2D_MULTISAMPLE 0x9108
// #define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
// #define GL_SAMPLER_2D_RECT 0x8B63
// #define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
// #define GL_SAMPLER_2D_SHADOW 0x8B62
// #define GL_SAMPLER_3D 0x8B5F
// #define GL_SAMPLER_BINDING 0x8919
// #define GL_SAMPLER_BUFFER 0x8DC2
// #define GL_SAMPLER_CUBE 0x8B60
// #define GL_SAMPLER_CUBE_SHADOW 0x8DC5
// #define GL_SAMPLES 0x80A9
// #define GL_SAMPLES_ARB 0x80A9
// #define GL_SAMPLES_PASSED 0x8914
// #define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
// #define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
// #define GL_SAMPLE_ALPHA_TO_ONE 0x809F
// #define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
// #define GL_SAMPLE_BUFFERS 0x80A8
// #define GL_SAMPLE_BUFFERS_ARB 0x80A8
// #define GL_SAMPLE_COVERAGE 0x80A0
// #define GL_SAMPLE_COVERAGE_ARB 0x80A0
// #define GL_SAMPLE_COVERAGE_INVERT 0x80AB
// #define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
// #define GL_SAMPLE_COVERAGE_VALUE 0x80AA
// #define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
// #define GL_SAMPLE_MASK 0x8E51
// #define GL_SAMPLE_MASK_VALUE 0x8E52
// #define GL_SAMPLE_POSITION 0x8E50
// #define GL_SCISSOR_BIT 0x00080000
// #define GL_SCISSOR_BOX 0x0C10
// #define GL_SCISSOR_TEST 0x0C11
// #define GL_SECONDARY_COLOR_ARRAY 0x845E
// #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
// #define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
// #define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
// #define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
// #define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
// #define GL_SELECT 0x1C02
// #define GL_SELECTION_BUFFER_POINTER 0x0DF3
// #define GL_SELECTION_BUFFER_SIZE 0x0DF4
// #define GL_SEPARATE_ATTRIBS 0x8C8D
// #define GL_SEPARATE_SPECULAR_COLOR 0x81FA
// #define GL_SET 0x150F
// #define GL_SHADER 0x82E1
// #define GL_SHADER_SOURCE_LENGTH 0x8B88
// #define GL_SHADER_TYPE 0x8B4F
// #define GL_SHADE_MODEL 0x0B54
// #define GL_SHADING_LANGUAGE_VERSION 0x8B8C
// #define GL_SHININESS 0x1601
// #define GL_SHORT 0x1402
// #define GL_SIGNALED 0x9119
// #define GL_SIGNED_NORMALIZED 0x8F9C
// #define GL_SINGLE_COLOR 0x81F9
// #define GL_SLUMINANCE 0x8C46
// #define GL_SLUMINANCE8 0x8C47
// #define GL_SLUMINANCE8_ALPHA8 0x8C45
// #define GL_SLUMINANCE_ALPHA 0x8C44
// #define GL_SMOOTH 0x1D01
// #define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
// #define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
// #define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
// #define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
// #define GL_SOURCE0_ALPHA 0x8588
// #define GL_SOURCE0_RGB 0x8580
// #define GL_SOURCE1_ALPHA 0x8589
// #define GL_SOURCE1_RGB 0x8581
// #define GL_SOURCE2_ALPHA 0x858A
// #define GL_SOURCE2_RGB 0x8582
// #define GL_SPECULAR 0x1202
// #define GL_SPHERE_MAP 0x2402
// #define GL_SPOT_CUTOFF 0x1206
// #define GL_SPOT_DIRECTION 0x1204
// #define GL_SPOT_EXPONENT 0x1205
// #define GL_SRC0_ALPHA 0x8588
// #define GL_SRC0_RGB 0x8580
// #define GL_SRC1_ALPHA 0x8589
// #define GL_SRC1_COLOR 0x88F9
// #define GL_SRC1_RGB 0x8581
// #define GL_SRC2_ALPHA 0x858A
// #define GL_SRC2_RGB 0x8582
// #define GL_SRC_ALPHA 0x0302
// #define GL_SRC_ALPHA_SATURATE 0x0308
// #define GL_SRC_COLOR 0x0300
// #define GL_SRGB 0x8C40
// #define GL_SRGB8 0x8C41
// #define GL_SRGB8_ALPHA8 0x8C43
// #define GL_SRGB_ALPHA 0x8C42
// #define GL_STACK_OVERFLOW 0x0503
// #define GL_STACK_UNDERFLOW 0x0504
// #define GL_STATIC_COPY 0x88E6
// #define GL_STATIC_DRAW 0x88E4
// #define GL_STATIC_READ 0x88E5
// #define GL_STENCIL 0x1802
// #define GL_STENCIL_ATTACHMENT 0x8D20
// #define GL_STENCIL_BACK_FAIL 0x8801
// #define GL_STENCIL_BACK_FUNC 0x8800
// #define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
// #define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
// #define GL_STENCIL_BACK_REF 0x8CA3
// #define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
// #define GL_STENCIL_BACK_WRITEMASK 0x8CA5
// #define GL_STENCIL_BITS 0x0D57
// #define GL_STENCIL_BUFFER_BIT 0x00000400
// #define GL_STENCIL_CLEAR_VALUE 0x0B91
// #define GL_STENCIL_FAIL 0x0B94
// #define GL_STENCIL_FUNC 0x0B92
// #define GL_STENCIL_INDEX 0x1901
// #define GL_STENCIL_INDEX1 0x8D46
// #define GL_STENCIL_INDEX16 0x8D49
// #define GL_STENCIL_INDEX4 0x8D47
// #define GL_STENCIL_INDEX8 0x8D48
// #define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
// #define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
// #define GL_STENCIL_REF 0x0B97
// #define GL_STENCIL_TEST 0x0B90
// #define GL_STENCIL_VALUE_MASK 0x0B93
// #define GL_STENCIL_WRITEMASK 0x0B98
// #define GL_STEREO 0x0C33
// #define GL_STREAM_COPY 0x88E2
// #define GL_STREAM_DRAW 0x88E0
// #define GL_STREAM_READ 0x88E1
// #define GL_SUBPIXEL_BITS 0x0D50
// #define GL_SUBTRACT 0x84E7
// #define GL_SYNC_CONDITION 0x9113
// #define GL_SYNC_FENCE 0x9116
// #define GL_SYNC_FLAGS 0x9115
// #define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
// #define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
// #define GL_SYNC_STATUS 0x9114
// #define GL_T 0x2001
// #define GL_T2F_C3F_V3F 0x2A2A
// #define GL_T2F_C4F_N3F_V3F 0x2A2C
// #define GL_T2F_C4UB_V3F 0x2A29
// #define GL_T2F_N3F_V3F 0x2A2B
// #define GL_T2F_V3F 0x2A27
// #define GL_T4F_C4F_N3F_V4F 0x2A2D
// #define GL_T4F_V4F 0x2A28
// #define GL_TEXTURE 0x1702
// #define GL_TEXTURE0 0x84C0
// #define GL_TEXTURE1 0x84C1
// #define GL_TEXTURE10 0x84CA
// #define GL_TEXTURE11 0x84CB
// #define GL_TEXTURE12 0x84CC
// #define GL_TEXTURE13 0x84CD
// #define GL_TEXTURE14 0x84CE
// #define GL_TEXTURE15 0x84CF
// #define GL_TEXTURE16 0x84D0
// #define GL_TEXTURE17 0x84D1
// #define GL_TEXTURE18 0x84D2
// #define GL_TEXTURE19 0x84D3
// #define GL_TEXTURE2 0x84C2
// #define GL_TEXTURE20 0x84D4
// #define GL_TEXTURE21 0x84D5
// #define GL_TEXTURE22 0x84D6
// #define GL_TEXTURE23 0x84D7
// #define GL_TEXTURE24 0x84D8
// #define GL_TEXTURE25 0x84D9
// #define GL_TEXTURE26 0x84DA
// #define GL_TEXTURE27 0x84DB
// #define GL_TEXTURE28 0x84DC
// #define GL_TEXTURE29 0x84DD
// #define GL_TEXTURE3 0x84C3
// #define GL_TEXTURE30 0x84DE
// #define GL_TEXTURE31 0x84DF
// #define GL_TEXTURE4 0x84C4
// #define GL_TEXTURE5 0x84C5
// #define GL_TEXTURE6 0x84C6
// #define GL_TEXTURE7 0x84C7
// #define GL_TEXTURE8 0x84C8
// #define GL_TEXTURE9 0x84C9
// #define GL_TEXTURE_1D 0x0DE0
// #define GL_TEXTURE_1D_ARRAY 0x8C18
// #define GL_TEXTURE_2D 0x0DE1
// #define GL_TEXTURE_2D_ARRAY 0x8C1A
// #define GL_TEXTURE_2D_MULTISAMPLE 0x9100
// #define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
// #define GL_TEXTURE_3D 0x806F
// #define GL_TEXTURE_ALPHA_SIZE 0x805F
// #define GL_TEXTURE_ALPHA_TYPE 0x8C13
// #define GL_TEXTURE_BASE_LEVEL 0x813C
// #define GL_TEXTURE_BINDING_1D 0x8068
// #define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
// #define GL_TEXTURE_BINDING_2D 0x8069
// #define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
// #define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
// #define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
// #define GL_TEXTURE_BINDING_3D 0x806A
// #define GL_TEXTURE_BINDING_BUFFER 0x8C2C
// #define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
// #define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
// #define GL_TEXTURE_BIT 0x00040000
// #define GL_TEXTURE_BLUE_SIZE 0x805E
// #define GL_TEXTURE_BLUE_TYPE 0x8C12
// #define GL_TEXTURE_BORDER 0x1005
// #define GL_TEXTURE_BORDER_COLOR 0x1004
// #define GL_TEXTURE_BUFFER 0x8C2A
// #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
// #define GL_TEXTURE_COMPARE_FUNC 0x884D
// #define GL_TEXTURE_COMPARE_MODE 0x884C
// // #define GL_TEXTURE_COMPONENTS 0x1003 // defined in GL/gl.h for v1.0 & v1.1
// #define GL_TEXTURE_COMPRESSED 0x86A1
// #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
// #define GL_TEXTURE_COMPRESSION_HINT 0x84EF
// #define GL_TEXTURE_COORD_ARRAY 0x8078
// #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
// #define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
// #define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
// #define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
// #define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
// #define GL_TEXTURE_CUBE_MAP 0x8513
// #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
// #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
// #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
// #define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
// #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
// #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
// #define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
// #define GL_TEXTURE_DEPTH 0x8071
// #define GL_TEXTURE_DEPTH_SIZE 0x884A
// #define GL_TEXTURE_DEPTH_TYPE 0x8C16
// #define GL_TEXTURE_ENV 0x2300
// #define GL_TEXTURE_ENV_COLOR 0x2201
// #define GL_TEXTURE_ENV_MODE 0x2200
// #define GL_TEXTURE_FILTER_CONTROL 0x8500
// #define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
// #define GL_TEXTURE_GEN_MODE 0x2500
// #define GL_TEXTURE_GEN_Q 0x0C63
// #define GL_TEXTURE_GEN_R 0x0C62
// #define GL_TEXTURE_GEN_S 0x0C60
// #define GL_TEXTURE_GEN_T 0x0C61
// #define GL_TEXTURE_GREEN_SIZE 0x805D
// #define GL_TEXTURE_GREEN_TYPE 0x8C11
// #define GL_TEXTURE_HEIGHT 0x1001
// #define GL_TEXTURE_INTENSITY_SIZE 0x8061
// #define GL_TEXTURE_INTENSITY_TYPE 0x8C15
// #define GL_TEXTURE_INTERNAL_FORMAT 0x1003
// #define GL_TEXTURE_LOD_BIAS 0x8501
// #define GL_TEXTURE_LUMINANCE_SIZE 0x8060
// #define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
// #define GL_TEXTURE_MAG_FILTER 0x2800
// #define GL_TEXTURE_MATRIX 0x0BA8
// #define GL_TEXTURE_MAX_LEVEL 0x813D
// #define GL_TEXTURE_MAX_LOD 0x813B
// #define GL_TEXTURE_MIN_FILTER 0x2801
// #define GL_TEXTURE_MIN_LOD 0x813A
// #define GL_TEXTURE_PRIORITY 0x8066
// #define GL_TEXTURE_RECTANGLE 0x84F5
// #define GL_TEXTURE_RED_SIZE 0x805C
// #define GL_TEXTURE_RED_TYPE 0x8C10
// #define GL_TEXTURE_RESIDENT 0x8067
// #define GL_TEXTURE_SAMPLES 0x9106
// #define GL_TEXTURE_SHARED_SIZE 0x8C3F
// #define GL_TEXTURE_STACK_DEPTH 0x0BA5
// #define GL_TEXTURE_STENCIL_SIZE 0x88F1
// #define GL_TEXTURE_SWIZZLE_A 0x8E45
// #define GL_TEXTURE_SWIZZLE_B 0x8E44
// #define GL_TEXTURE_SWIZZLE_G 0x8E43
// #define GL_TEXTURE_SWIZZLE_R 0x8E42
// #define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
// #define GL_TEXTURE_WIDTH 0x1000
// #define GL_TEXTURE_WRAP_R 0x8072
// #define GL_TEXTURE_WRAP_S 0x2802
// #define GL_TEXTURE_WRAP_T 0x2803
// #define GL_TIMEOUT_EXPIRED 0x911B
// #ifdef _WIN32
// #define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF // defined in <OpenGL/gl3.h>
// #endif
// #define GL_TIMESTAMP 0x8E28
// #define GL_TIME_ELAPSED 0x88BF
// #define GL_TRANSFORM_BIT 0x00001000
// #define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
// #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
// #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
// #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
// #define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
// #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
// #define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
// #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
// #define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
// #define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
// #define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
// #define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
// #define GL_TRIANGLES 0x0004
// #define GL_TRIANGLES_ADJACENCY 0x000C
// #define GL_TRIANGLE_FAN 0x0006
// #define GL_TRIANGLE_STRIP 0x0005
// #define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
// #define GL_TRUE 1
// #define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
// #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
// #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
// #define GL_UNIFORM_BLOCK_BINDING 0x8A3F
// #define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
// #define GL_UNIFORM_BLOCK_INDEX 0x8A3A
// #define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
// #define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
// #define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
// #define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
// #define GL_UNIFORM_BUFFER 0x8A11
// #define GL_UNIFORM_BUFFER_BINDING 0x8A28
// #define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
// #define GL_UNIFORM_BUFFER_SIZE 0x8A2A
// #define GL_UNIFORM_BUFFER_START 0x8A29
// #define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
// #define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
// #define GL_UNIFORM_NAME_LENGTH 0x8A39
// #define GL_UNIFORM_OFFSET 0x8A3B
// #define GL_UNIFORM_SIZE 0x8A38
// #define GL_UNIFORM_TYPE 0x8A37
// #define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
// #define GL_UNPACK_ALIGNMENT 0x0CF5
// #define GL_UNPACK_IMAGE_HEIGHT 0x806E
// #define GL_UNPACK_LSB_FIRST 0x0CF1
// #define GL_UNPACK_ROW_LENGTH 0x0CF2
// #define GL_UNPACK_SKIP_IMAGES 0x806D
// #define GL_UNPACK_SKIP_PIXELS 0x0CF4
// #define GL_UNPACK_SKIP_ROWS 0x0CF3
// #define GL_UNPACK_SWAP_BYTES 0x0CF0
// #define GL_UNSIGNALED 0x9118
// #define GL_UNSIGNED_BYTE 0x1401
// #define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
// #define GL_UNSIGNED_BYTE_3_3_2 0x8032
// #define GL_UNSIGNED_INT 0x1405
// #define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
// #define GL_UNSIGNED_INT_10_10_10_2 0x8036
// #define GL_UNSIGNED_INT_24_8 0x84FA
// #define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
// #define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
// #define GL_UNSIGNED_INT_8_8_8_8 0x8035
// #define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
// #define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
// #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
// #define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
// #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
// #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
// #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
// #define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
// #define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
// #define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
// #define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
// #define GL_UNSIGNED_INT_VEC2 0x8DC6
// #define GL_UNSIGNED_INT_VEC3 0x8DC7
// #define GL_UNSIGNED_INT_VEC4 0x8DC8
// #define GL_UNSIGNED_NORMALIZED 0x8C17
// #define GL_UNSIGNED_SHORT 0x1403
// #define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
// #define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
// #define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
// #define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
// #define GL_UNSIGNED_SHORT_5_6_5 0x8363
// #define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
// #define GL_UPPER_LEFT 0x8CA2
// #define GL_V2F 0x2A20
// #define GL_V3F 0x2A21
// #define GL_VALIDATE_STATUS 0x8B83
// #define GL_VENDOR 0x1F00
// #define GL_VERSION 0x1F02
// #define GL_VERTEX_ARRAY 0x8074
// #define GL_VERTEX_ARRAY_BINDING 0x85B5
// #define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
// #define GL_VERTEX_ARRAY_POINTER 0x808E
// #define GL_VERTEX_ARRAY_SIZE 0x807A
// #define GL_VERTEX_ARRAY_STRIDE 0x807C
// #define GL_VERTEX_ARRAY_TYPE 0x807B
// #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
// #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
// #define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
// #define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
// #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
// #define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
// #define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
// #define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
// #define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
// #define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
// #define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
// #define GL_VERTEX_SHADER 0x8B31
// #define GL_VIEWPORT 0x0BA2
// #define GL_VIEWPORT_BIT 0x00000800
// #define GL_WAIT_FAILED 0x911D
// #define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
// #define GL_WRITE_ONLY 0x88B9
// #define GL_XOR 0x1506
// #define GL_ZERO 0
// #define GL_ZOOM_X 0x0D16
// #define GL_ZOOM_Y 0x0D17

  #ifdef _WIN32
    // #ifndef APIENTRY
    // #define APIENTRY
    // #endif
    // #ifndef APIENTRYP
    // #define APIENTRYP APIENTRY *
    // #endif
    //
    // typedef ptrdiff_t GLsizeiptr;
    // typedef struct __GLsync *GLsync;
    // typedef uint64_t GLuint64;
    // typedef int64_t GLint64;
    // typedef unsigned int GLenum;
    // typedef unsigned char GLboolean;
    // typedef unsigned int GLbitfield;
    // typedef void GLvoid;
    // typedef signed char GLbyte;
    // typedef unsigned char GLubyte;
    // typedef short GLshort;
    // typedef unsigned short GLushort;
    // typedef int GLint;
    // typedef unsigned int GLuint;
    // typedef int32_t GLclampx;
    // typedef int GLsizei;
    // typedef float_t GLfloat;
    // typedef float_t GLclampf;
    // typedef double GLdouble;
    // typedef double GLclampd;
    // typedef void *GLeglClientBufferEXT;
    // typedef void *GLeglImageOES;
    // typedef char GLchar;
    // typedef char GLcharARB;
    // typedef unsigned int GLhandleARB;
    //
    // typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
    // typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
    // typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
    // typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
    //
    // typedef BOOL(WINAPI *PFNWGLCHOOSEPIXELFORMATARBPROC)(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
    // typedef HGLRC(WINAPI *PFNWGLCREATECONTEXTATTRIBSARBPROC)(HDC hDC, HGLRC hShareContext, const int *attribList);
    // // typedef HGLRC(WINAPI *PFNWGLGETCURRENTCONTEXTARBPROC)(void);
    // // typedef BOOL(WINAPI *PFNWGLMAKECURRENTPROC)(HDC hDC, HGLRC hShareContext);
    //
    // typedef void (APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat   value);
    // typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum   texture);
    // typedef void (APIENTRYP PFNGLALPHAFUNCPROC)(GLenum   func, GLfloat   ref);
    // typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei   n, const  GLuint  * textures, GLboolean  * residences);
    // typedef void (APIENTRYP PFNGLARRAYELEMENTPROC)(GLint   i);
    // typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint   program, GLuint   shader);
    // typedef void (APIENTRYP PFNGLBEGINPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint   id, GLenum   mode);
    // typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum   target, GLuint   id);
    // typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum   primitiveMode);
    // typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint   program, GLuint   index, const  GLchar  * name);
    // typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum   target, GLuint   buffer);
    // typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum   target, GLuint   index, GLuint   buffer);
    // typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum   target, GLuint   index, GLuint   buffer, GLintptr   offset, GLsizeiptr   size);
    // typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint   program, GLuint   color, const  GLchar  * name);
    // typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint   program, GLuint   colorNumber, GLuint   index, const  GLchar  * name);
    // typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum   target, GLuint   framebuffer);
    // typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum   target, GLuint   renderbuffer);
    // typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint   unit, GLuint   sampler);
    // typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum   target, GLuint   texture);
    // typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint   array);
    // typedef void (APIENTRYP PFNGLBITMAPPROC)(GLsizei   width, GLsizei   height, GLfloat   xorig, GLfloat   yorig, GLfloat   xmove, GLfloat   ymove, const  GLubyte  * bitmap);
    // typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
    // typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum   modeRGB, GLenum   modeAlpha);
    // typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum   sfactor, GLenum   dfactor);
    // typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum   sfactorRGB, GLenum   dfactorRGB, GLenum   sfactorAlpha, GLenum   dfactorAlpha);
    // typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint   srcX0, GLint   srcY0, GLint   srcX1, GLint   srcY1, GLint   dstX0, GLint   dstY0, GLint   dstX1, GLint   dstY1, GLbitfield   mask, GLenum   filter);
    // typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum   target, GLsizeiptr   size, const void * data, GLenum   usage);
    // typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   size, const void * data);
    // typedef void (APIENTRYP PFNGLCALLLISTPROC)(GLuint   list);
    // typedef void (APIENTRYP PFNGLCALLLISTSPROC)(GLsizei   n, GLenum   type, const void * lists);
    // typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum   target);
    // typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum   target, GLenum   clamp);
    // typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield   mask);
    // typedef void (APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
    // typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum   buffer, GLint   drawbuffer, GLfloat   depth, GLint   stencil);
    // typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLint  * value);
    // typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
    // typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble   depth);
    // typedef void (APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat   c);
    // typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint   s);
    // typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum   texture);
    // typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync   sync, GLbitfield   flags, GLuint64   timeout);
    // typedef void (APIENTRYP PFNGLCLIPPLANEPROC)(GLenum   plane, const  GLdouble  * equation);
    // typedef void (APIENTRYP PFNGLCOLOR3BPROC)(GLbyte   red, GLbyte   green, GLbyte   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3BVPROC)(const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3DPROC)(GLdouble   red, GLdouble   green, GLdouble   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3FPROC)(GLfloat   red, GLfloat   green, GLfloat   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3IPROC)(GLint   red, GLint   green, GLint   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3SPROC)(GLshort   red, GLshort   green, GLshort   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte   red, GLubyte   green, GLubyte   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3UBVPROC)(const  GLubyte  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3UIPROC)(GLuint   red, GLuint   green, GLuint   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3UIVPROC)(const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLCOLOR3USPROC)(GLushort   red, GLushort   green, GLushort   blue);
    // typedef void (APIENTRYP PFNGLCOLOR3USVPROC)(const  GLushort  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4BPROC)(GLbyte   red, GLbyte   green, GLbyte   blue, GLbyte   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4BVPROC)(const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4DPROC)(GLdouble   red, GLdouble   green, GLdouble   blue, GLdouble   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4FPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4IPROC)(GLint   red, GLint   green, GLint   blue, GLint   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4SPROC)(GLshort   red, GLshort   green, GLshort   blue, GLshort   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte   red, GLubyte   green, GLubyte   blue, GLubyte   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4UBVPROC)(const  GLubyte  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4UIPROC)(GLuint   red, GLuint   green, GLuint   blue, GLuint   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4UIVPROC)(const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLCOLOR4USPROC)(GLushort   red, GLushort   green, GLushort   blue, GLushort   alpha);
    // typedef void (APIENTRYP PFNGLCOLOR4USVPROC)(const  GLushort  * v);
    // typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean   red, GLboolean   green, GLboolean   blue, GLboolean   alpha);
    // typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint   index, GLboolean   r, GLboolean   g, GLboolean   b, GLboolean   a);
    // typedef void (APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum   face, GLenum   mode);
    // typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum   type, GLuint   color);
    // typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum   type, const  GLuint  * color);
    // typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum   type, GLuint   color);
    // typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum   type, const  GLuint  * color);
    // typedef void (APIENTRYP PFNGLCOLORPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint   shader);
    // typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLint   border, GLsizei   imageSize, const void * data);
    // typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLsizei   height, GLint   border, GLsizei   imageSize, const void * data);
    // typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLint   border, GLsizei   imageSize, const void * data);
    // typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLsizei   imageSize, const void * data);
    // typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLsizei   imageSize, const void * data);
    // typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLsizei   imageSize, const void * data);
    // typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum   readTarget, GLenum   writeTarget, GLintptr   readOffset, GLintptr   writeOffset, GLsizeiptr   size);
    // typedef void (APIENTRYP PFNGLCOPYPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   type);
    // typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLint   x, GLint   y, GLsizei   width, GLint   border);
    // typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLint   border);
    // typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   x, GLint   y, GLsizei   width);
    // typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
    // typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
    // typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)(void);
    // typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum   type);
    // typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC   callback, const void * userParam);
    // typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC)(GLenum   source, GLenum   type, GLenum   severity, GLsizei   count, const  GLuint  * ids, GLboolean   enabled);
    // typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC)(GLenum   source, GLenum   type, GLuint   id, GLenum   severity, GLsizei   length, const  GLchar  * buf);
    // typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei   n, const  GLuint  * buffers);
    // typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei   n, const  GLuint  * framebuffers);
    // typedef void (APIENTRYP PFNGLDELETELISTSPROC)(GLuint   list, GLsizei   range);
    // typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint   program);
    // typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei   n, const  GLuint  * ids);
    // typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei   n, const  GLuint  * renderbuffers);
    // typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei   count, const  GLuint  * samplers);
    // typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint   shader);
    // typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync   sync);
    // typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei   n, const  GLuint  * textures);
    // typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei   n, const  GLuint  * arrays);
    // typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum   func);
    // typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean   flag);
    // typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble   n, GLdouble   f);
    // typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint   program, GLuint   shader);
    // typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum   cap);
    // typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum   array);
    // typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint   index);
    // typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum   target, GLuint   index);
    // typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum   mode, GLint   first, GLsizei   count);
    // typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum   mode, GLint   first, GLsizei   count, GLsizei   instancecount);
    // typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum   buf);
    // typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei   n, const  GLenum  * bufs);
    // typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices);
    // typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLint   basevertex);
    // typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount);
    // typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount, GLint   basevertex);
    // typedef void (APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum   mode, GLuint   start, GLuint   end, GLsizei   count, GLenum   type, const void * indices);
    // typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum   mode, GLuint   start, GLuint   end, GLsizei   count, GLenum   type, const void * indices, GLint   basevertex);
    // typedef void (APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean   flag);
    // typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLEDGEFLAGVPROC)(const  GLboolean  * flag);
    // typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum   cap);
    // typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum   array);
    // typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint   index);
    // typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum   target, GLuint   index);
    // typedef void (APIENTRYP PFNGLENDPROC)(void);
    // typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)(void);
    // typedef void (APIENTRYP PFNGLENDLISTPROC)(void);
    // typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum   target);
    // typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)(void);
    // typedef void (APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble   u);
    // typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC)(const  GLdouble  * u);
    // typedef void (APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat   u);
    // typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC)(const  GLfloat  * u);
    // typedef void (APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble   u, GLdouble   v);
    // typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC)(const  GLdouble  * u);
    // typedef void (APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat   u, GLfloat   v);
    // typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC)(const  GLfloat  * u);
    // typedef void (APIENTRYP PFNGLEVALMESH1PROC)(GLenum   mode, GLint   i1, GLint   i2);
    // typedef void (APIENTRYP PFNGLEVALMESH2PROC)(GLenum   mode, GLint   i1, GLint   i2, GLint   j1, GLint   j2);
    // typedef void (APIENTRYP PFNGLEVALPOINT1PROC)(GLint   i);
    // typedef void (APIENTRYP PFNGLEVALPOINT2PROC)(GLint   i, GLint   j);
    // typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei   size, GLenum   type, GLfloat  * buffer);
    // typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum   condition, GLbitfield   flags);
    // typedef void (APIENTRYP PFNGLFINISHPROC)(void);
    // typedef void (APIENTRYP PFNGLFLUSHPROC)(void);
    // typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   length);
    // typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble   coord);
    // typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const  GLdouble  * coord);
    // typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat   coord);
    // typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const  GLfloat  * coord);
    // typedef void (APIENTRYP PFNGLFOGFPROC)(GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLFOGFVPROC)(GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLFOGIPROC)(GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLFOGIVPROC)(GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum   target, GLenum   attachment, GLenum   renderbuffertarget, GLuint   renderbuffer);
    // typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum   target, GLenum   attachment, GLuint   texture, GLint   level);
    // typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level);
    // typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level);
    // typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level, GLint   zoffset);
    // typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum   target, GLenum   attachment, GLuint   texture, GLint   level, GLint   layer);
    // typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLFRUSTUMPROC)(GLdouble   left, GLdouble   right, GLdouble   bottom, GLdouble   top, GLdouble   zNear, GLdouble   zFar);
    // typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei   n, GLuint  * buffers);
    // typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei   n, GLuint  * framebuffers);
    // typedef GLuint (APIENTRYP PFNGLGENLISTSPROC)(GLsizei   range);
    // typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei   n, GLuint  * ids);
    // typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei   n, GLuint  * renderbuffers);
    // typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei   count, GLuint  * samplers);
    // typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei   n, GLuint  * textures);
    // typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei   n, GLuint  * arrays);
    // typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum   target);
    // typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLint  * size, GLenum  * type, GLchar  * name);
    // typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLint  * size, GLenum  * type, GLchar  * name);
    // typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint   program, GLuint   uniformBlockIndex, GLsizei   bufSize, GLsizei  * length, GLchar  * uniformBlockName);
    // typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint   program, GLuint   uniformBlockIndex, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint   program, GLuint   uniformIndex, GLsizei   bufSize, GLsizei  * length, GLchar  * uniformName);
    // typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint   program, GLsizei   uniformCount, const  GLuint  * uniformIndices, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint   program, GLsizei   maxCount, GLsizei  * count, GLuint  * shaders);
    // typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint   program, const  GLchar  * name);
    // typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum   target, GLuint   index, GLboolean  * data);
    // typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum   pname, GLboolean  * data);
    // typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum   target, GLenum   pname, GLint64  * params);
    // typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum   target, GLenum   pname, void ** params);
    // typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   size, void * data);
    // typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum   plane, GLdouble  * equation);
    // typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum   target, GLint   level, void * img);
    // typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC)(GLuint   count, GLsizei   bufSize, GLenum  * sources, GLenum  * types, GLuint  * ids, GLenum  * severities, GLsizei  * lengths, GLchar  * messageLog);
    // typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum   pname, GLdouble  * data);
    // typedef GLenum (APIENTRYP PFNGLGETERRORPROC)(void);
    // typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum   pname, GLfloat  * data);
    // typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint   program, const  GLchar  * name);
    // typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint   program, const  GLchar  * name);
    // typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum   target, GLenum   attachment, GLenum   pname, GLint  * params);
    // typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
    // typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum   target, GLuint   index, GLint64  * data);
    // typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum   pname, GLint64  * data);
    // typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum   target, GLuint   index, GLint  * data);
    // typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum   pname, GLint  * data);
    // typedef void (APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum   light, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum   light, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETMAPDVPROC)(GLenum   target, GLenum   query, GLdouble  * v);
    // typedef void (APIENTRYP PFNGLGETMAPFVPROC)(GLenum   target, GLenum   query, GLfloat  * v);
    // typedef void (APIENTRYP PFNGLGETMAPIVPROC)(GLenum   target, GLenum   query, GLint  * v);
    // typedef void (APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum   face, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum   face, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum   pname, GLuint   index, GLfloat  * val);
    // typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC)(GLenum   identifier, GLuint   name, GLsizei   bufSize, GLsizei  * length, GLchar  * label);
    // typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei   bufSize, GLsizei  * length, GLchar  * label);
    // typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum   map, GLfloat  * values);
    // typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum   map, GLuint  * values);
    // typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum   map, GLushort  * values);
    // typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum   pname, void ** params);
    // typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte  * mask);
    // typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint   program, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
    // typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint   program, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint   id, GLenum   pname, GLint64  * params);
    // typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint   id, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint   id, GLenum   pname, GLuint64  * params);
    // typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint   id, GLenum   pname, GLuint  * params);
    // typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint   sampler, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint   sampler, GLenum   pname, GLuint  * params);
    // typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint   sampler, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint   sampler, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint   shader, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
    // typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint   shader, GLsizei   bufSize, GLsizei  * length, GLchar  * source);
    // typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint   shader, GLenum   pname, GLint  * params);
    // typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC)(GLenum   name);
    // typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum   name, GLuint   index);
    // typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync   sync, GLenum   pname, GLsizei   bufSize, GLsizei  * length, GLint  * values);
    // typedef void (APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum   target, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum   coord, GLenum   pname, GLdouble  * params);
    // typedef void (APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum   coord, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum   coord, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum   target, GLint   level, GLenum   format, GLenum   type, void * pixels);
    // typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum   target, GLint   level, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum   target, GLint   level, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum   target, GLenum   pname, GLuint  * params);
    // typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum   target, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLsizei  * size, GLenum  * type, GLchar  * name);
    // typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint   program, const  GLchar  * uniformBlockName);
    // typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint   program, GLsizei   uniformCount, const  GLchar  *const* uniformNames, GLuint  * uniformIndices);
    // typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint   program, const  GLchar  * name);
    // typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint   program, GLint   location, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint   program, GLint   location, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint   program, GLint   location, GLuint  * params);
    // typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint   index, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint   index, GLenum   pname, GLuint  * params);
    // typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint   index, GLenum   pname, void ** pointer);
    // typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint   index, GLenum   pname, GLdouble  * params);
    // typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint   index, GLenum   pname, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint   index, GLenum   pname, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC)(GLenum   target, GLenum   format, GLenum   type, GLsizei   bufSize, void * table);
    // typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum   target, GLint   lod, GLsizei   bufSize, void * img);
    // typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum   target, GLenum   format, GLenum   type, GLsizei   bufSize, void * image);
    // typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC)(GLenum   target, GLboolean   reset, GLenum   format, GLenum   type, GLsizei   bufSize, void * values);
    // typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC)(GLenum   target, GLenum   query, GLsizei   bufSize, GLdouble  * v);
    // typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC)(GLenum   target, GLenum   query, GLsizei   bufSize, GLfloat  * v);
    // typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC)(GLenum   target, GLenum   query, GLsizei   bufSize, GLint  * v);
    // typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC)(GLenum   target, GLboolean   reset, GLenum   format, GLenum   type, GLsizei   bufSize, void * values);
    // typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC)(GLenum   map, GLsizei   bufSize, GLfloat  * values);
    // typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC)(GLenum   map, GLsizei   bufSize, GLuint  * values);
    // typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC)(GLenum   map, GLsizei   bufSize, GLushort  * values);
    // typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei   bufSize, GLubyte  * pattern);
    // typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum   target, GLenum   format, GLenum   type, GLsizei   rowBufSize, void * row, GLsizei   columnBufSize, void * column, void * span);
    // typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC)(GLenum   target, GLint   level, GLenum   format, GLenum   type, GLsizei   bufSize, void * img);
    // typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLdouble  * params);
    // typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLfloat  * params);
    // typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLint  * params);
    // typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLuint  * params);
    // typedef void (APIENTRYP PFNGLHINTPROC)(GLenum   target, GLenum   mode);
    // typedef void (APIENTRYP PFNGLINDEXMASKPROC)(GLuint   mask);
    // typedef void (APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLINDEXDPROC)(GLdouble   c);
    // typedef void (APIENTRYP PFNGLINDEXDVPROC)(const  GLdouble  * c);
    // typedef void (APIENTRYP PFNGLINDEXFPROC)(GLfloat   c);
    // typedef void (APIENTRYP PFNGLINDEXFVPROC)(const  GLfloat  * c);
    // typedef void (APIENTRYP PFNGLINDEXIPROC)(GLint   c);
    // typedef void (APIENTRYP PFNGLINDEXIVPROC)(const  GLint  * c);
    // typedef void (APIENTRYP PFNGLINDEXSPROC)(GLshort   c);
    // typedef void (APIENTRYP PFNGLINDEXSVPROC)(const  GLshort  * c);
    // typedef void (APIENTRYP PFNGLINDEXUBPROC)(GLubyte   c);
    // typedef void (APIENTRYP PFNGLINDEXUBVPROC)(const  GLubyte  * c);
    // typedef void (APIENTRYP PFNGLINITNAMESPROC)(void);
    // typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum   format, GLsizei   stride, const void * pointer);
    // typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint   buffer);
    // typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum   cap);
    // typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum   target, GLuint   index);
    // typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint   framebuffer);
    // typedef GLboolean (APIENTRYP PFNGLISLISTPROC)(GLuint   list);
    // typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint   program);
    // typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint   id);
    // typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint   renderbuffer);
    // typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint   sampler);
    // typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint   shader);
    // typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync   sync);
    // typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint   texture);
    // typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint   array);
    // typedef void (APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLLIGHTFPROC)(GLenum   light, GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLLIGHTFVPROC)(GLenum   light, GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLLIGHTIPROC)(GLenum   light, GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLLIGHTIVPROC)(GLenum   light, GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLLINESTIPPLEPROC)(GLint   factor, GLushort   pattern);
    // typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat   width);
    // typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint   program);
    // typedef void (APIENTRYP PFNGLLISTBASEPROC)(GLuint   base);
    // typedef void (APIENTRYP PFNGLLOADIDENTITYPROC)(void);
    // typedef void (APIENTRYP PFNGLLOADMATRIXDPROC)(const  GLdouble  * m);
    // typedef void (APIENTRYP PFNGLLOADMATRIXFPROC)(const  GLfloat  * m);
    // typedef void (APIENTRYP PFNGLLOADNAMEPROC)(GLuint   name);
    // typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const  GLdouble  * m);
    // typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC)(const  GLfloat  * m);
    // typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum   opcode);
    // typedef void (APIENTRYP PFNGLMAP1DPROC)(GLenum   target, GLdouble   u1, GLdouble   u2, GLint   stride, GLint   order, const  GLdouble  * points);
    // typedef void (APIENTRYP PFNGLMAP1FPROC)(GLenum   target, GLfloat   u1, GLfloat   u2, GLint   stride, GLint   order, const  GLfloat  * points);
    // typedef void (APIENTRYP PFNGLMAP2DPROC)(GLenum   target, GLdouble   u1, GLdouble   u2, GLint   ustride, GLint   uorder, GLdouble   v1, GLdouble   v2, GLint   vstride, GLint   vorder, const  GLdouble  * points);
    // typedef void (APIENTRYP PFNGLMAP2FPROC)(GLenum   target, GLfloat   u1, GLfloat   u2, GLint   ustride, GLint   uorder, GLfloat   v1, GLfloat   v2, GLint   vstride, GLint   vorder, const  GLfloat  * points);
    // typedef void * (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum   target, GLenum   access);
    // typedef void * (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   length, GLbitfield   access);
    // typedef void (APIENTRYP PFNGLMAPGRID1DPROC)(GLint   un, GLdouble   u1, GLdouble   u2);
    // typedef void (APIENTRYP PFNGLMAPGRID1FPROC)(GLint   un, GLfloat   u1, GLfloat   u2);
    // typedef void (APIENTRYP PFNGLMAPGRID2DPROC)(GLint   un, GLdouble   u1, GLdouble   u2, GLint   vn, GLdouble   v1, GLdouble   v2);
    // typedef void (APIENTRYP PFNGLMAPGRID2FPROC)(GLint   un, GLfloat   u1, GLfloat   u2, GLint   vn, GLfloat   v1, GLfloat   v2);
    // typedef void (APIENTRYP PFNGLMATERIALFPROC)(GLenum   face, GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLMATERIALFVPROC)(GLenum   face, GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLMATERIALIPROC)(GLenum   face, GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLMATERIALIVPROC)(GLenum   face, GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLMATRIXMODEPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLMULTMATRIXDPROC)(const  GLdouble  * m);
    // typedef void (APIENTRYP PFNGLMULTMATRIXFPROC)(const  GLfloat  * m);
    // typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const  GLdouble  * m);
    // typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const  GLfloat  * m);
    // typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum   mode, const  GLint  * first, const  GLsizei  * count, GLsizei   drawcount);
    // typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum   mode, const  GLsizei  * count, GLenum   type, const void *const* indices, GLsizei   drawcount);
    // typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum   mode, const  GLsizei  * count, GLenum   type, const void *const* indices, GLsizei   drawcount, const  GLint  * basevertex);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum   target, GLdouble   s);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum   target, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC)(GLenum   target, GLfloat   s);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC)(GLenum   target, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC)(GLenum   target, GLint   s);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC)(GLenum   target, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC)(GLenum   target, GLshort   s);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC)(GLenum   target, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC)(GLenum   target, GLdouble   s, GLdouble   t);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC)(GLenum   target, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC)(GLenum   target, GLfloat   s, GLfloat   t);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC)(GLenum   target, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC)(GLenum   target, GLint   s, GLint   t);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC)(GLenum   target, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC)(GLenum   target, GLshort   s, GLshort   t);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC)(GLenum   target, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC)(GLenum   target, GLdouble   s, GLdouble   t, GLdouble   r);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC)(GLenum   target, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC)(GLenum   target, GLfloat   s, GLfloat   t, GLfloat   r);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC)(GLenum   target, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC)(GLenum   target, GLint   s, GLint   t, GLint   r);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC)(GLenum   target, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC)(GLenum   target, GLshort   s, GLshort   t, GLshort   r);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC)(GLenum   target, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC)(GLenum   target, GLdouble   s, GLdouble   t, GLdouble   r, GLdouble   q);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC)(GLenum   target, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC)(GLenum   target, GLfloat   s, GLfloat   t, GLfloat   r, GLfloat   q);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC)(GLenum   target, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC)(GLenum   target, GLint   s, GLint   t, GLint   r, GLint   q);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC)(GLenum   target, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC)(GLenum   target, GLshort   s, GLshort   t, GLshort   r, GLshort   q);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC)(GLenum   target, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum   texture, GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum   texture, GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLNEWLISTPROC)(GLuint   list, GLenum   mode);
    // typedef void (APIENTRYP PFNGLNORMAL3BPROC)(GLbyte   nx, GLbyte   ny, GLbyte   nz);
    // typedef void (APIENTRYP PFNGLNORMAL3BVPROC)(const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLNORMAL3DPROC)(GLdouble   nx, GLdouble   ny, GLdouble   nz);
    // typedef void (APIENTRYP PFNGLNORMAL3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLNORMAL3FPROC)(GLfloat   nx, GLfloat   ny, GLfloat   nz);
    // typedef void (APIENTRYP PFNGLNORMAL3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLNORMAL3IPROC)(GLint   nx, GLint   ny, GLint   nz);
    // typedef void (APIENTRYP PFNGLNORMAL3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLNORMAL3SPROC)(GLshort   nx, GLshort   ny, GLshort   nz);
    // typedef void (APIENTRYP PFNGLNORMAL3SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLOBJECTLABELPROC)(GLenum   identifier, GLuint   name, GLsizei   length, const  GLchar  * label);
    // typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei   length, const  GLchar  * label);
    // typedef void (APIENTRYP PFNGLORTHOPROC)(GLdouble   left, GLdouble   right, GLdouble   bottom, GLdouble   top, GLdouble   zNear, GLdouble   zFar);
    // typedef void (APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat   token);
    // typedef void (APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum   map, GLsizei   mapsize, const  GLfloat  * values);
    // typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum   map, GLsizei   mapsize, const  GLuint  * values);
    // typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum   map, GLsizei   mapsize, const  GLushort  * values);
    // typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat   xfactor, GLfloat   yfactor);
    // typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat   size);
    // typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum   face, GLenum   mode);
    // typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat   factor, GLfloat   units);
    // typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const  GLubyte  * mask);
    // typedef void (APIENTRYP PFNGLPOPATTRIBPROC)(void);
    // typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC)(void);
    // typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC)(void);
    // typedef void (APIENTRYP PFNGLPOPMATRIXPROC)(void);
    // typedef void (APIENTRYP PFNGLPOPNAMEPROC)(void);
    // typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint   index);
    // typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei   n, const  GLuint  * textures, const  GLfloat  * priorities);
    // typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield   mask);
    // typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield   mask);
    // typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC)(GLenum   source, GLuint   id, GLsizei   length, const  GLchar  * message);
    // typedef void (APIENTRYP PFNGLPUSHMATRIXPROC)(void);
    // typedef void (APIENTRYP PFNGLPUSHNAMEPROC)(GLuint   name);
    // typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint   id, GLenum   target);
    // typedef void (APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble   x, GLdouble   y);
    // typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat   x, GLfloat   y);
    // typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS2IPROC)(GLint   x, GLint   y);
    // typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort   x, GLshort   y);
    // typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS3IPROC)(GLint   x, GLint   y, GLint   z);
    // typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort   x, GLshort   y, GLshort   z);
    // typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
    // typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
    // typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS4IPROC)(GLint   x, GLint   y, GLint   z, GLint   w);
    // typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort   x, GLshort   y, GLshort   z, GLshort   w);
    // typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum   src);
    // typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, void * pixels);
    // typedef void (APIENTRYP PFNGLREADNPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, GLsizei   bufSize, void * data);
    // typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, GLsizei   bufSize, void * data);
    // typedef void (APIENTRYP PFNGLRECTDPROC)(GLdouble   x1, GLdouble   y1, GLdouble   x2, GLdouble   y2);
    // typedef void (APIENTRYP PFNGLRECTDVPROC)(const  GLdouble  * v1, const  GLdouble  * v2);
    // typedef void (APIENTRYP PFNGLRECTFPROC)(GLfloat   x1, GLfloat   y1, GLfloat   x2, GLfloat   y2);
    // typedef void (APIENTRYP PFNGLRECTFVPROC)(const  GLfloat  * v1, const  GLfloat  * v2);
    // typedef void (APIENTRYP PFNGLRECTIPROC)(GLint   x1, GLint   y1, GLint   x2, GLint   y2);
    // typedef void (APIENTRYP PFNGLRECTIVPROC)(const  GLint  * v1, const  GLint  * v2);
    // typedef void (APIENTRYP PFNGLRECTSPROC)(GLshort   x1, GLshort   y1, GLshort   x2, GLshort   y2);
    // typedef void (APIENTRYP PFNGLRECTSVPROC)(const  GLshort  * v1, const  GLshort  * v2);
    // typedef GLint (APIENTRYP PFNGLRENDERMODEPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum   target, GLenum   internalformat, GLsizei   width, GLsizei   height);
    // typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height);
    // typedef void (APIENTRYP PFNGLROTATEDPROC)(GLdouble   angle, GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLROTATEFPROC)(GLfloat   angle, GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat   value, GLboolean   invert);
    // typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC)(GLfloat   value, GLboolean   invert);
    // typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint   maskNumber, GLbitfield   mask);
    // typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint   sampler, GLenum   pname, const  GLint  * param);
    // typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint   sampler, GLenum   pname, const  GLuint  * param);
    // typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint   sampler, GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint   sampler, GLenum   pname, const  GLfloat  * param);
    // typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint   sampler, GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint   sampler, GLenum   pname, const  GLint  * param);
    // typedef void (APIENTRYP PFNGLSCALEDPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLSCALEFPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte   red, GLbyte   green, GLbyte   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble   red, GLdouble   green, GLdouble   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC)(GLfloat   red, GLfloat   green, GLfloat   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC)(GLint   red, GLint   green, GLint   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC)(GLshort   red, GLshort   green, GLshort   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC)(GLubyte   red, GLubyte   green, GLubyte   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC)(const  GLubyte  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC)(GLuint   red, GLuint   green, GLuint   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC)(const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC)(GLushort   red, GLushort   green, GLushort   blue);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC)(const  GLushort  * v);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum   type, GLuint   color);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum   type, const  GLuint  * color);
    // typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei   size, GLuint  * buffer);
    // typedef void (APIENTRYP PFNGLSHADEMODELPROC)(GLenum   mode);
    // typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint   shader, GLsizei   count, const  GLchar  *const* string, const  GLint  * length);
    // typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum   func, GLint   ref, GLuint   mask);
    // typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum   face, GLenum   func, GLint   ref, GLuint   mask);
    // typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint   mask);
    // typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum   face, GLuint   mask);
    // typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum   fail, GLenum   zfail, GLenum   zpass);
    // typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum   face, GLenum   sfail, GLenum   dpfail, GLenum   dppass);
    // typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum   target, GLenum   internalformat, GLuint   buffer);
    // typedef void (APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble   s);
    // typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat   s);
    // typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD1IPROC)(GLint   s);
    // typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort   s);
    // typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble   s, GLdouble   t);
    // typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat   s, GLfloat   t);
    // typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD2IPROC)(GLint   s, GLint   t);
    // typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort   s, GLshort   t);
    // typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble   s, GLdouble   t, GLdouble   r);
    // typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat   s, GLfloat   t, GLfloat   r);
    // typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD3IPROC)(GLint   s, GLint   t, GLint   r);
    // typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort   s, GLshort   t, GLshort   r);
    // typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble   s, GLdouble   t, GLdouble   r, GLdouble   q);
    // typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat   s, GLfloat   t, GLfloat   r, GLfloat   q);
    // typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD4IPROC)(GLint   s, GLint   t, GLint   r, GLint   q);
    // typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort   s, GLshort   t, GLshort   r, GLshort   q);
    // typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum   type, GLuint   coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum   type, const  GLuint  * coords);
    // typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLTEXENVFPROC)(GLenum   target, GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLTEXENVFVPROC)(GLenum   target, GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLTEXENVIPROC)(GLenum   target, GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLTEXENVIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLTEXGENDPROC)(GLenum   coord, GLenum   pname, GLdouble   param);
    // typedef void (APIENTRYP PFNGLTEXGENDVPROC)(GLenum   coord, GLenum   pname, const  GLdouble  * params);
    // typedef void (APIENTRYP PFNGLTEXGENFPROC)(GLenum   coord, GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLTEXGENFVPROC)(GLenum   coord, GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLTEXGENIPROC)(GLenum   coord, GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLTEXGENIVPROC)(GLenum   coord, GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLint   border, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLsizei   height, GLint   border, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLboolean   fixedsamplelocations);
    // typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLint   border, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLboolean   fixedsamplelocations);
    // typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum   target, GLenum   pname, const  GLuint  * params);
    // typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum   target, GLenum   pname, GLfloat   param);
    // typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum   target, GLenum   pname, const  GLfloat  * params);
    // typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum   target, GLenum   pname, GLint   param);
    // typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
    // typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLenum   type, const void * pixels);
    // typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint   program, GLsizei   count, const  GLchar  *const* varyings, GLenum   bufferMode);
    // typedef void (APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint   location, GLfloat   v0);
    // typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint   location, GLint   v0);
    // typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint   location, GLuint   v0);
    // typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint   location, GLfloat   v0, GLfloat   v1);
    // typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint   location, GLint   v0, GLint   v1);
    // typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint   location, GLuint   v0, GLuint   v1);
    // typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2);
    // typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint   location, GLint   v0, GLint   v1, GLint   v2);
    // typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint   location, GLuint   v0, GLuint   v1, GLuint   v2);
    // typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2, GLfloat   v3);
    // typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint   location, GLint   v0, GLint   v1, GLint   v2, GLint   v3);
    // typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint   location, GLuint   v0, GLuint   v1, GLuint   v2, GLuint   v3);
    // typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint   program, GLuint   uniformBlockIndex, GLuint   uniformBlockBinding);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
    // typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum   target);
    // typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint   program);
    // typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint   program);
    // typedef void (APIENTRYP PFNGLVERTEX2DPROC)(GLdouble   x, GLdouble   y);
    // typedef void (APIENTRYP PFNGLVERTEX2DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEX2FPROC)(GLfloat   x, GLfloat   y);
    // typedef void (APIENTRYP PFNGLVERTEX2FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEX2IPROC)(GLint   x, GLint   y);
    // typedef void (APIENTRYP PFNGLVERTEX2IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEX2SPROC)(GLshort   x, GLshort   y);
    // typedef void (APIENTRYP PFNGLVERTEX2SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEX3DPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLVERTEX3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEX3FPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLVERTEX3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEX3IPROC)(GLint   x, GLint   y, GLint   z);
    // typedef void (APIENTRYP PFNGLVERTEX3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEX3SPROC)(GLshort   x, GLshort   y, GLshort   z);
    // typedef void (APIENTRYP PFNGLVERTEX3SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEX4DPROC)(GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
    // typedef void (APIENTRYP PFNGLVERTEX4DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEX4FPROC)(GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
    // typedef void (APIENTRYP PFNGLVERTEX4FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEX4IPROC)(GLint   x, GLint   y, GLint   z, GLint   w);
    // typedef void (APIENTRYP PFNGLVERTEX4IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEX4SPROC)(GLshort   x, GLshort   y, GLshort   z, GLshort   w);
    // typedef void (APIENTRYP PFNGLVERTEX4SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint   index, GLdouble   x);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint   index, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint   index, GLfloat   x);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint   index, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint   index, GLshort   x);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint   index, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint   index, GLdouble   x, GLdouble   y);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint   index, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint   index, GLfloat   x, GLfloat   y);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint   index, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint   index, GLshort   x, GLshort   y);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint   index, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint   index, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint   index, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint   index, GLshort   x, GLshort   y, GLshort   z);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint   index, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint   index, const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint   index, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint   index, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint   index, GLubyte   x, GLubyte   y, GLubyte   z, GLubyte   w);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint   index, const  GLubyte  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint   index, const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint   index, const  GLushort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint   index, const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint   index, const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint   index, const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint   index, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint   index, GLshort   x, GLshort   y, GLshort   z, GLshort   w);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint   index, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint   index, const  GLubyte  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint   index, const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint   index, const  GLushort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint   index, GLuint   divisor);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint   index, GLint   x);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint   index, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint   index, GLuint   x);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint   index, const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint   index, GLint   x, GLint   y);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint   index, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint   index, GLuint   x, GLuint   y);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint   index, const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint   index, GLint   x, GLint   y, GLint   z);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint   index, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint   index, GLuint   x, GLuint   y, GLuint   z);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint   index, const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint   index, const  GLbyte  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint   index, GLint   x, GLint   y, GLint   z, GLint   w);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint   index, const  GLint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint   index, const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint   index, const  GLubyte  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint   index, GLuint   x, GLuint   y, GLuint   z, GLuint   w);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint   index, const  GLuint  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint   index, const  GLushort  * v);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLboolean   normalized, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum   type, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum   type, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum   type, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum   type, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum   type, GLuint   value);
    // typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum   type, const  GLuint  * value);
    // typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
    // typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height);
    // typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync   sync, GLbitfield   flags, GLuint64   timeout);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC)(GLdouble   x, GLdouble   y);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC)(GLfloat   x, GLfloat   y);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC)(GLint   x, GLint   y);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC)(GLshort   x, GLshort   y);
    // typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC)(const  GLshort  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC)(GLdouble   x, GLdouble   y, GLdouble   z);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC)(const  GLdouble  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC)(GLfloat   x, GLfloat   y, GLfloat   z);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC)(const  GLfloat  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC)(GLint   x, GLint   y, GLint   z);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC)(const  GLint  * v);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC)(GLshort   x, GLshort   y, GLshort   z);
    // typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC)(const  GLshort  * v);
    //
    // // opengl 4.0
    // typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
  	// typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
  	// typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  	// typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
  	// typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  	// typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
  	// typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
  	// typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
  	// typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
  	// typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
  	// typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  	// typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
  	// typedef void (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
  	// typedef void (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
  	// typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
  	// typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
  	// typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
  	// typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
  	// typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
  	// typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
  	// typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
  	// typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
  	// typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
  	// typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
  	// typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
  	// typedef void (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
  	// typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
  	// typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
  	// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
  	// typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
  	// typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
  	// typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
  	// typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
    //
    // //opengl 4.1
    // typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)(void);
  	// typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
  	// typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
  	// typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
  	// typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
  	// typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
  	// typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
  	// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
  	// typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
  	// typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
  	// typedef void (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
  	// typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
  	// typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
  	// typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
  	// typedef void (APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
  	// typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
  	// typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  	// typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
  	// typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
  	// typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
  	// typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
  	// typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
  	// typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
  	// typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
  	// typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
  	// typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
  	// typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
  	// typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
  	// typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
  	// typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
  	// typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
    //
    // #define WGL_DRAW_TO_WINDOW_ARB 0x2001
    // #define WGL_SUPPORT_OPENGL_ARB 0x2010
    // #define WGL_DOUBLE_BUFFER_ARB 0x2011
    // #define WGL_PIXEL_TYPE_ARB 0x2013
    // #define WGL_COLOR_BITS_ARB 0x2014
    // #define WGL_DEPTH_BITS_ARB 0x2022
    // #define WGL_STENCIL_BITS_ARB 0x2023
    // #define WGL_TYPE_RGBA_ARB 0x202B
    // #define WGL_CONTEXT_MAJOR_VERSION_ARB 0x2091
    // #define WGL_CONTEXT_MINOR_VERSION_ARB 0x2092
    //
    // PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormat;
    // PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribs;
    // // PFNWGLGETCURRENTCONTEXTARBPROC wglGetCurrentContext;
    // // PFNWGLMAKECURRENTPROC wglMakeCurrent;
    //
    // // PFNGLACCUMPROC glAccum; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLACTIVETEXTUREPROC glActiveTexture;
    // // PFNGLALPHAFUNCPROC glAlphaFunc; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLARETEXTURESRESIDENTPROC glAreTexturesResident;// defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLARRAYELEMENTPROC glArrayElement;// defined in GL/gl.h for v1.0 & v1.1
    // PFNGLATTACHSHADERPROC glAttachShader;
    // // PFNGLBEGINPROC glBegin;// defined in GL/gl.h for v1.0 & v1.1
    // PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
    // PFNGLBEGINQUERYPROC glBeginQuery;
    // PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
    // PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
    // PFNGLBINDBUFFERPROC glBindBuffer;
    // PFNGLBINDBUFFERBASEPROC glBindBufferBase;
    // PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
    // PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
    // PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
    // PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
    // PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
    // PFNGLBINDSAMPLERPROC glBindSampler;
    // // PFNGLBINDTEXTUREPROC glBindTexture;// defined in GL/gl.h for v1.0 & v1.1
    // PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
    // // PFNGLBITMAPPROC glBitmap;// defined in GL/gl.h for v1.0 & v1.1
    // PFNGLBLENDCOLORPROC glBlendColor;
    // PFNGLBLENDEQUATIONPROC glBlendEquation;
    // PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
    // // PFNGLBLENDFUNCPROC glBlendFunc;// defined in GL/gl.h for v1.0 & v1.1
    // PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
    // PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
    // PFNGLBUFFERDATAPROC glBufferData;
    // PFNGLBUFFERSUBDATAPROC glBufferSubData;
    // // PFNGLCALLLISTPROC glCallList; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCALLLISTSPROC glCallLists; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
    // PFNGLCLAMPCOLORPROC glClampColor;
    // // PFNGLCLEARPROC glClear; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCLEARACCUMPROC glClearAccum; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLCLEARBUFFERFIPROC glClearBufferfi;
    // PFNGLCLEARBUFFERFVPROC glClearBufferfv;
    // PFNGLCLEARBUFFERIVPROC glClearBufferiv;
    // PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
    // // PFNGLCLEARCOLORPROC glClearColor; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCLEARDEPTHPROC glClearDepth; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCLEARINDEXPROC glClearIndex; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCLEARSTENCILPROC glClearStencil; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
    // PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
    // // PFNGLCLIPPLANEPROC glClipPlane; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3BPROC glColor3b; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3BVPROC glColor3bv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3DPROC glColor3d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3DVPROC glColor3dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3FPROC glColor3f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3FVPROC glColor3fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3IPROC glColor3i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3IVPROC glColor3iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3SPROC glColor3s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3SVPROC glColor3sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3UBPROC glColor3ub; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3UBVPROC glColor3ubv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3UIPROC glColor3ui; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3UIVPROC glColor3uiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3USPROC glColor3us; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR3USVPROC glColor3usv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4BPROC glColor4b; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4BVPROC glColor4bv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4DPROC glColor4d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4DVPROC glColor4dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4FPROC glColor4f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4FVPROC glColor4fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4IPROC glColor4i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4IVPROC glColor4iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4SPROC glColor4s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4SVPROC glColor4sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4UBPROC glColor4ub; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4UBVPROC glColor4ubv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4UIPROC glColor4ui; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4UIVPROC glColor4uiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4USPROC glColor4us; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLOR4USVPROC glColor4usv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLORMASKPROC glColorMask; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLORMASKIPROC glColorMaski; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOLORMATERIALPROC glColorMaterial; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLCOLORP3UIPROC glColorP3ui;
    // PFNGLCOLORP3UIVPROC glColorP3uiv;
    // PFNGLCOLORP4UIPROC glColorP4ui;
    // PFNGLCOLORP4UIVPROC glColorP4uiv;
    // // PFNGLCOLORPOINTERPROC glColorPointer; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLCOMPILESHADERPROC glCompileShader;
    // PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
    // PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
    // PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
    // PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
    // PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
    // PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
    // PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
    // // PFNGLCOPYPIXELSPROC glCopyPixels; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
    // PFNGLCREATEPROGRAMPROC glCreateProgram;
    // PFNGLCREATESHADERPROC glCreateShader;
    // // PFNGLCULLFACEPROC glCullFace; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
    // PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
    // PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
    // PFNGLDELETEBUFFERSPROC glDeleteBuffers;
    // PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
    // // PFNGLDELETELISTSPROC glDeleteLists; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDELETEPROGRAMPROC glDeleteProgram;
    // PFNGLDELETEQUERIESPROC glDeleteQueries;
    // PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
    // PFNGLDELETESAMPLERSPROC glDeleteSamplers;
    // PFNGLDELETESHADERPROC glDeleteShader;
    // PFNGLDELETESYNCPROC glDeleteSync;
    // // PFNGLDELETETEXTURESPROC glDeleteTextures; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
    // // PFNGLDEPTHFUNCPROC glDepthFunc; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLDEPTHMASKPROC glDepthMask; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLDEPTHRANGEPROC glDepthRange; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDETACHSHADERPROC glDetachShader;
    // // PFNGLDISABLEPROC glDisable; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLDISABLECLIENTSTATEPROC glDisableClientState; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
    // PFNGLDISABLEIPROC glDisablei;
    // // PFNGLDRAWARRAYSPROC glDrawArrays; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
    // // PFNGLDRAWBUFFERPROC glDrawBuffer; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDRAWBUFFERSPROC glDrawBuffers;
    // // PFNGLDRAWELEMENTSPROC glDrawElements; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
    // PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
    // PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
    // // PFNGLDRAWPIXELSPROC glDrawPixels; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
    // PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
    // // PFNGLEDGEFLAGPROC glEdgeFlag; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEDGEFLAGPOINTERPROC glEdgeFlagPointer; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEDGEFLAGVPROC glEdgeFlagv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLENABLEPROC glEnable; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLENABLECLIENTSTATEPROC glEnableClientState; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
    // PFNGLENABLEIPROC glEnablei;
    // // PFNGLENDPROC glEnd; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
    // // PFNGLENDLISTPROC glEndList; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLENDQUERYPROC glEndQuery;
    // PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
    // // PFNGLEVALCOORD1DPROC glEvalCoord1d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD1DVPROC glEvalCoord1dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD1FPROC glEvalCoord1f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD1FVPROC glEvalCoord1fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD2DPROC glEvalCoord2d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD2DVPROC glEvalCoord2dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD2FPROC glEvalCoord2f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALCOORD2FVPROC glEvalCoord2fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALMESH1PROC glEvalMesh1; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALMESH2PROC glEvalMesh2; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALPOINT1PROC glEvalPoint1; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLEVALPOINT2PROC glEvalPoint2; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLFEEDBACKBUFFERPROC glFeedbackBuffer; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLFENCESYNCPROC glFenceSync;
    // // PFNGLFINISHPROC glFinish; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLFLUSHPROC glFlush; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
    // PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
    // PFNGLFOGCOORDDPROC glFogCoordd;
    // PFNGLFOGCOORDDVPROC glFogCoorddv;
    // PFNGLFOGCOORDFPROC glFogCoordf;
    // PFNGLFOGCOORDFVPROC glFogCoordfv;
    // // PFNGLFOGFPROC glFogf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLFOGFVPROC glFogfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLFOGIPROC glFogi; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLFOGIVPROC glFogiv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
    // PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
    // PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
    // PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
    // PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
    // PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
    // // PFNGLFRONTFACEPROC glFrontFace; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLFRUSTUMPROC glFrustum; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGENBUFFERSPROC glGenBuffers;
    // PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
    // // PFNGLGENLISTSPROC glGenLists; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGENQUERIESPROC glGenQueries;
    // PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
    // PFNGLGENSAMPLERSPROC glGenSamplers;
    // // PFNGLGENTEXTURESPROC glGenTextures; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
    // PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
    // PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
    // PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
    // PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
    // PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
    // PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
    // PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
    // PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
    // PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
    // PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
    // // PFNGLGETBOOLEANVPROC glGetBooleanv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
    // PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
    // PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
    // PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
    // // PFNGLGETCLIPPLANEPROC glGetClipPlane; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
    // PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
    // // PFNGLGETDOUBLEVPROC glGetDoublev; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETERRORPROC glGetError; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETFLOATVPROC glGetFloatv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
    // PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
    // PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
    // PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
    // PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
    // PFNGLGETINTEGER64VPROC glGetInteger64v;
    // PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
    // // PFNGLGETINTEGERVPROC glGetIntegerv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETLIGHTFVPROC glGetLightfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETLIGHTIVPROC glGetLightiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETMAPDVPROC glGetMapdv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETMAPFVPROC glGetMapfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETMAPIVPROC glGetMapiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETMATERIALFVPROC glGetMaterialfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETMATERIALIVPROC glGetMaterialiv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
    // PFNGLGETOBJECTLABELPROC glGetObjectLabel;
    // PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
    // // PFNGLGETPIXELMAPFVPROC glGetPixelMapfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETPIXELMAPUIVPROC glGetPixelMapuiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETPIXELMAPUSVPROC glGetPixelMapusv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETPOINTERVPROC glGetPointerv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
    // PFNGLGETPROGRAMIVPROC glGetProgramiv;
    // PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
    // PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
    // PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
    // PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
    // PFNGLGETQUERYIVPROC glGetQueryiv;
    // PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
    // PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
    // PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
    // PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
    // PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
    // PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
    // PFNGLGETSHADERSOURCEPROC glGetShaderSource;
    // PFNGLGETSHADERIVPROC glGetShaderiv;
    // // PFNGLGETSTRINGPROC glGetString; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETSTRINGIPROC glGetStringi;
    // PFNGLGETSYNCIVPROC glGetSynciv;
    // // PFNGLGETTEXENVFVPROC glGetTexEnvfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXENVIVPROC glGetTexEnviv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXGENDVPROC glGetTexGendv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXGENFVPROC glGetTexGenfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXGENIVPROC glGetTexGeniv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXIMAGEPROC glGetTexImage; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
    // PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
    // // PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
    // PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
    // PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
    // PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
    // PFNGLGETUNIFORMFVPROC glGetUniformfv;
    // PFNGLGETUNIFORMIVPROC glGetUniformiv;
    // PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
    // PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
    // PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
    // PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
    // PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
    // PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
    // PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
    // PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
    // PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
    // PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
    // PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
    // PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
    // PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
    // PFNGLGETNMAPIVARBPROC glGetnMapivARB;
    // PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
    // PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
    // PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
    // PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
    // PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
    // PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
    // PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
    // PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
    // PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
    // PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
    // PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
    // // PFNGLHINTPROC glHint; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXMASKPROC glIndexMask; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXPOINTERPROC glIndexPointer; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXDPROC glIndexd; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXDVPROC glIndexdv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXFPROC glIndexf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXFVPROC glIndexfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXIPROC glIndexi; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXIVPROC glIndexiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXSPROC glIndexs; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXSVPROC glIndexsv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXUBPROC glIndexub; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINDEXUBVPROC glIndexubv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINITNAMESPROC glInitNames; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLINTERLEAVEDARRAYSPROC glInterleavedArrays; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLISBUFFERPROC glIsBuffer;
    // // PFNGLISENABLEDPROC glIsEnabled; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLISENABLEDIPROC glIsEnabledi;
    // PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
    // // PFNGLISLISTPROC glIsList; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLISPROGRAMPROC glIsProgram;
    // PFNGLISQUERYPROC glIsQuery;
    // PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
    // PFNGLISSAMPLERPROC glIsSampler;
    // PFNGLISSHADERPROC glIsShader;
    // PFNGLISSYNCPROC glIsSync;
    // // PFNGLISTEXTUREPROC glIsTexture; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLISVERTEXARRAYPROC glIsVertexArray;
    // // PFNGLLIGHTMODELFPROC glLightModelf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTMODELFVPROC glLightModelfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTMODELIPROC glLightModeli; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTMODELIVPROC glLightModeliv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTFPROC glLightf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTFVPROC glLightfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTIPROC glLighti; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLIGHTIVPROC glLightiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLINESTIPPLEPROC glLineStipple; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLINEWIDTHPROC glLineWidth; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLLINKPROGRAMPROC glLinkProgram;
    // // PFNGLLISTBASEPROC glListBase; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLOADIDENTITYPROC glLoadIdentity; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLOADMATRIXDPROC glLoadMatrixd; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLOADMATRIXFPROC glLoadMatrixf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLLOADNAMEPROC glLoadName; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
    // PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
    // // PFNGLLOGICOPPROC glLogicOp; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAP1DPROC glMap1d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAP1FPROC glMap1f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAP2DPROC glMap2d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAP2FPROC glMap2f; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLMAPBUFFERPROC glMapBuffer;
    // PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
    // // PFNGLMAPGRID1DPROC glMapGrid1d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAPGRID1FPROC glMapGrid1f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAPGRID2DPROC glMapGrid2d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMAPGRID2FPROC glMapGrid2f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMATERIALFPROC glMaterialf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMATERIALFVPROC glMaterialfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMATERIALIPROC glMateriali; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMATERIALIVPROC glMaterialiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMATRIXMODEPROC glMatrixMode; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMULTMATRIXDPROC glMultMatrixd; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLMULTMATRIXFPROC glMultMatrixf; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
    // PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
    // PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
    // PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
    // PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
    // PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
    // PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
    // PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
    // PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
    // PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
    // PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
    // PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
    // PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
    // PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
    // PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
    // PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
    // PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
    // PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
    // PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
    // PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
    // PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
    // PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
    // PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
    // PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
    // PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
    // PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
    // PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
    // PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
    // PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
    // PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
    // PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
    // PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
    // PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
    // PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
    // PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
    // PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
    // PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
    // PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
    // PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
    // PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
    // PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
    // PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
    // PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
    // PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
    // PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
    // // PFNGLNEWLISTPROC glNewList; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3BPROC glNormal3b; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3BVPROC glNormal3bv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3DPROC glNormal3d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3DVPROC glNormal3dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3FPROC glNormal3f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3FVPROC glNormal3fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3IPROC glNormal3i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3IVPROC glNormal3iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3SPROC glNormal3s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLNORMAL3SVPROC glNormal3sv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLNORMALP3UIPROC glNormalP3ui;
    // PFNGLNORMALP3UIVPROC glNormalP3uiv;
    // // PFNGLNORMALPOINTERPROC glNormalPointer; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLOBJECTLABELPROC glObjectLabel;
    // PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
    // // PFNGLORTHOPROC glOrtho; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPASSTHROUGHPROC glPassThrough; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELMAPFVPROC glPixelMapfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELMAPUIVPROC glPixelMapuiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELMAPUSVPROC glPixelMapusv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELSTOREFPROC glPixelStoref; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELSTOREIPROC glPixelStorei; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELTRANSFERFPROC glPixelTransferf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELTRANSFERIPROC glPixelTransferi; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPIXELZOOMPROC glPixelZoom; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLPOINTPARAMETERFPROC glPointParameterf;
    // PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
    // PFNGLPOINTPARAMETERIPROC glPointParameteri;
    // PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
    // // PFNGLPOINTSIZEPROC glPointSize; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPOLYGONMODEPROC glPolygonMode; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPOLYGONOFFSETPROC glPolygonOffset; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPOLYGONSTIPPLEPROC glPolygonStipple; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPOPATTRIBPROC glPopAttrib; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPOPCLIENTATTRIBPROC glPopClientAttrib; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
    // // PFNGLPOPMATRIXPROC glPopMatrix; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPOPNAMEPROC glPopName; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
    // // PFNGLPRIORITIZETEXTURESPROC glPrioritizeTextures; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
    // // PFNGLPUSHATTRIBPROC glPushAttrib; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPUSHCLIENTATTRIBPROC glPushClientAttrib; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
    // // PFNGLPUSHMATRIXPROC glPushMatrix; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLPUSHNAMEPROC glPushName; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLQUERYCOUNTERPROC glQueryCounter;
    // // PFNGLRASTERPOS2DPROC glRasterPos2d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2DVPROC glRasterPos2dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2FPROC glRasterPos2f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2FVPROC glRasterPos2fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2IPROC glRasterPos2i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2IVPROC glRasterPos2iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2SPROC glRasterPos2s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS2SVPROC glRasterPos2sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3DPROC glRasterPos3d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3DVPROC glRasterPos3dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3FPROC glRasterPos3f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3FVPROC glRasterPos3fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3IPROC glRasterPos3i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3IVPROC glRasterPos3iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3SPROC glRasterPos3s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS3SVPROC glRasterPos3sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4DPROC glRasterPos4d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4DVPROC glRasterPos4dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4FPROC glRasterPos4f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4FVPROC glRasterPos4fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4IPROC glRasterPos4i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4IVPROC glRasterPos4iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4SPROC glRasterPos4s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRASTERPOS4SVPROC glRasterPos4sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLREADBUFFERPROC glReadBuffer; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLREADPIXELSPROC glReadPixels; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLREADNPIXELSPROC glReadnPixels;
    // PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
    // // PFNGLRECTDPROC glRectd; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTDVPROC glRectdv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTFPROC glRectf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTFVPROC glRectfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTIPROC glRecti; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTIVPROC glRectiv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTSPROC glRects; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRECTSVPROC glRectsv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLRENDERMODEPROC glRenderMode; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
    // PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
    // // PFNGLROTATEDPROC glRotated; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLROTATEFPROC glRotatef; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
    // PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
    // PFNGLSAMPLEMASKIPROC glSampleMaski;
    // PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
    // PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
    // PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
    // PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
    // PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
    // PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
    // // PFNGLSCALEDPROC glScaled; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLSCALEFPROC glScalef; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLSCISSORPROC glScissor; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
    // PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
    // PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
    // PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
    // PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
    // PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
    // PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
    // PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
    // PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
    // PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
    // PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
    // PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
    // PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
    // PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
    // PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
    // PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
    // PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
    // PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
    // PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
    // // PFNGLSELECTBUFFERPROC glSelectBuffer; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLSHADEMODELPROC glShadeModel; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLSHADERSOURCEPROC glShaderSource;
    // // PFNGLSTENCILFUNCPROC glStencilFunc; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
    // // PFNGLSTENCILMASKPROC glStencilMask; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
    // // PFNGLSTENCILOPPROC glStencilOp; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
    // PFNGLTEXBUFFERPROC glTexBuffer;
    // // PFNGLTEXCOORD1DPROC glTexCoord1d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1DVPROC glTexCoord1dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1FPROC glTexCoord1f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1FVPROC glTexCoord1fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1IPROC glTexCoord1i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1IVPROC glTexCoord1iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1SPROC glTexCoord1s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD1SVPROC glTexCoord1sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2DPROC glTexCoord2d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2DVPROC glTexCoord2dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2FPROC glTexCoord2f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2FVPROC glTexCoord2fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2IPROC glTexCoord2i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2IVPROC glTexCoord2iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2SPROC glTexCoord2s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD2SVPROC glTexCoord2sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3DPROC glTexCoord3d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3DVPROC glTexCoord3dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3FPROC glTexCoord3f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3FVPROC glTexCoord3fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3IPROC glTexCoord3i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3IVPROC glTexCoord3iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3SPROC glTexCoord3s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD3SVPROC glTexCoord3sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4DPROC glTexCoord4d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4DVPROC glTexCoord4dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4FPROC glTexCoord4f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4FVPROC glTexCoord4fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4IPROC glTexCoord4i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4IVPROC glTexCoord4iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4SPROC glTexCoord4s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXCOORD4SVPROC glTexCoord4sv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
    // PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
    // PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
    // PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
    // PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
    // PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
    // PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
    // PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
    // // PFNGLTEXCOORDPOINTERPROC glTexCoordPointer; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXENVFPROC glTexEnvf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXENVFVPROC glTexEnvfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXENVIPROC glTexEnvi; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXENVIVPROC glTexEnviv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXGENDPROC glTexGend; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXGENDVPROC glTexGendv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXGENFPROC glTexGenf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXGENFVPROC glTexGenfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXGENIPROC glTexGeni; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXGENIVPROC glTexGeniv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXIMAGE1DPROC glTexImage1D; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXIMAGE2DPROC glTexImage2D; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
    // PFNGLTEXIMAGE3DPROC glTexImage3D;
    // PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
    // PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
    // PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
    // // PFNGLTEXPARAMETERFPROC glTexParameterf; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXPARAMETERFVPROC glTexParameterfv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXPARAMETERIPROC glTexParameteri; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXPARAMETERIVPROC glTexParameteriv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
    // PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
    // // PFNGLTRANSLATEDPROC glTranslated; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLTRANSLATEFPROC glTranslatef; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLUNIFORM1FPROC glUniform1f;
    // PFNGLUNIFORM1FVPROC glUniform1fv;
    // PFNGLUNIFORM1IPROC glUniform1i;
    // PFNGLUNIFORM1IVPROC glUniform1iv;
    // PFNGLUNIFORM1UIPROC glUniform1ui;
    // PFNGLUNIFORM1UIVPROC glUniform1uiv;
    // PFNGLUNIFORM2FPROC glUniform2f;
    // PFNGLUNIFORM2FVPROC glUniform2fv;
    // PFNGLUNIFORM2IPROC glUniform2i;
    // PFNGLUNIFORM2IVPROC glUniform2iv;
    // PFNGLUNIFORM2UIPROC glUniform2ui;
    // PFNGLUNIFORM2UIVPROC glUniform2uiv;
    // PFNGLUNIFORM3FPROC glUniform3f;
    // PFNGLUNIFORM3FVPROC glUniform3fv;
    // PFNGLUNIFORM3IPROC glUniform3i;
    // PFNGLUNIFORM3IVPROC glUniform3iv;
    // PFNGLUNIFORM3UIPROC glUniform3ui;
    // PFNGLUNIFORM3UIVPROC glUniform3uiv;
    // PFNGLUNIFORM4FPROC glUniform4f;
    // PFNGLUNIFORM4FVPROC glUniform4fv;
    // PFNGLUNIFORM4IPROC glUniform4i;
    // PFNGLUNIFORM4IVPROC glUniform4iv;
    // PFNGLUNIFORM4UIPROC glUniform4ui;
    // PFNGLUNIFORM4UIVPROC glUniform4uiv;
    // PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
    // PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
    // PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
    // PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
    // PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
    // PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
    // PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
    // PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
    // PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
    // PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
    // PFNGLUNMAPBUFFERPROC glUnmapBuffer;
    // PFNGLUSEPROGRAMPROC glUseProgram;
    // PFNGLVALIDATEPROGRAMPROC glValidateProgram;
    // // PFNGLVERTEX2DPROC glVertex2d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2DVPROC glVertex2dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2FPROC glVertex2f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2FVPROC glVertex2fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2IPROC glVertex2i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2IVPROC glVertex2iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2SPROC glVertex2s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX2SVPROC glVertex2sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3DPROC glVertex3d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3DVPROC glVertex3dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3FPROC glVertex3f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3FVPROC glVertex3fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3IPROC glVertex3i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3IVPROC glVertex3iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3SPROC glVertex3s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX3SVPROC glVertex3sv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4DPROC glVertex4d; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4DVPROC glVertex4dv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4FPROC glVertex4f; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4FVPROC glVertex4fv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4IPROC glVertex4i; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4IVPROC glVertex4iv; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4SPROC glVertex4s; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVERTEX4SVPROC glVertex4sv; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
    // PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
    // PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
    // PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
    // PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
    // PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
    // PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
    // PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
    // PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
    // PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
    // PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
    // PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
    // PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
    // PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
    // PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
    // PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
    // PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
    // PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
    // PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
    // PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
    // PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
    // PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
    // PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
    // PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
    // PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
    // PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
    // PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
    // PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
    // PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
    // PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
    // PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
    // PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
    // PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
    // PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
    // PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
    // PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
    // PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
    // PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
    // PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
    // PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
    // PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
    // PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
    // PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
    // PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
    // PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
    // PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
    // PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
    // PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
    // PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
    // PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
    // PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
    // PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
    // PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
    // PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
    // PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
    // PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
    // PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
    // PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
    // PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
    // PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
    // PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
    // PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
    // PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
    // PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
    // PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
    // PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
    // PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
    // PFNGLVERTEXP2UIPROC glVertexP2ui;
    // PFNGLVERTEXP2UIVPROC glVertexP2uiv;
    // PFNGLVERTEXP3UIPROC glVertexP3ui;
    // PFNGLVERTEXP3UIVPROC glVertexP3uiv;
    // PFNGLVERTEXP4UIPROC glVertexP4ui;
    // PFNGLVERTEXP4UIVPROC glVertexP4uiv;
    // // PFNGLVERTEXPOINTERPROC glVertexPointer; // defined in GL/gl.h for v1.0 & v1.1
    // // PFNGLVIEWPORTPROC glViewport; // defined in GL/gl.h for v1.0 & v1.1
    // PFNGLWAITSYNCPROC glWaitSync;
    // PFNGLWINDOWPOS2DPROC glWindowPos2d;
    // PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
    // PFNGLWINDOWPOS2FPROC glWindowPos2f;
    // PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
    // PFNGLWINDOWPOS2IPROC glWindowPos2i;
    // PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
    // PFNGLWINDOWPOS2SPROC glWindowPos2s;
    // PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
    // PFNGLWINDOWPOS3DPROC glWindowPos3d;
    // PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
    // PFNGLWINDOWPOS3FPROC glWindowPos3f;
    // PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
    // PFNGLWINDOWPOS3IPROC glWindowPos3i;
    // PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
    // PFNGLWINDOWPOS3SPROC glWindowPos3s;
    // PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
    // //opengl 4.0
    // PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
  	// PFNGLBLENDEQUATIONIPROC glBlendEquationi;
  	// PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
  	// PFNGLBLENDFUNCIPROC glBlendFunci;
  	// PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
  	// PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
  	// PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
  	// PFNGLUNIFORM1DPROC glUniform1d;
  	// PFNGLUNIFORM2DPROC glUniform2d;
  	// PFNGLUNIFORM3DPROC glUniform3d;
  	// PFNGLUNIFORM4DPROC glUniform4d;
  	// PFNGLUNIFORM1DVPROC glUniform1dv;
  	// PFNGLUNIFORM2DVPROC glUniform2dv;
  	// PFNGLUNIFORM3DVPROC glUniform3dv;
  	// PFNGLUNIFORM4DVPROC glUniform4dv;
  	// PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
  	// PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
  	// PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
  	// PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
  	// PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
  	// PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
  	// PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
  	// PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
  	// PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
  	// PFNGLGETUNIFORMDVPROC glGetUniformdv;
  	// PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
  	// PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
  	// PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
  	// PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
  	// PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
  	// PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
  	// PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
  	// PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
  	// PFNGLPATCHPARAMETERIPROC glPatchParameteri;
  	// PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
  	// PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
  	// PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
  	// PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
  	// PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
  	// PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
  	// PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
  	// PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
  	// PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
  	// PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
  	// PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
  	// PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
    //
    // //opengl 4.1
    // PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
  	// PFNGLSHADERBINARYPROC glShaderBinary;
  	// PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
  	// PFNGLDEPTHRANGEFPROC glDepthRangef;
  	// PFNGLCLEARDEPTHFPROC glClearDepthf;
  	// PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
  	// PFNGLPROGRAMBINARYPROC glProgramBinary;
  	// PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
  	// PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
  	// PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
  	// PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
  	// PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
  	// PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
  	// PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
  	// PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
  	// PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
  	// PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
  	// PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
  	// PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
  	// PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
  	// PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
  	// PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
  	// PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
  	// PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
  	// PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
  	// PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
  	// PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
  	// PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
  	// PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
  	// PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
  	// PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
  	// PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
  	// PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
  	// PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
  	// PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
  	// PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
  	// PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
  	// PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
  	// PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
  	// PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
  	// PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
  	// PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
  	// PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
  	// PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
  	// PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
  	// PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
  	// PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
  	// PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
  	// PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
  	// PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
  	// PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
  	// PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
  	// PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
  	// PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
  	// PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
  	// PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
  	// PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
  	// PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
  	// PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
  	// PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
  	// PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
  	// PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
  	// PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
  	// PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
  	// PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
  	// PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
  	// PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
  	// PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
  	// PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
  	// PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
  	// PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
  	// PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
  	// PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
  	// PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
  	// PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
  	// PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
  	// PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
  	// PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
  	// PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
  	// PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
  	// PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
  	// PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
  	// PFNGLSCISSORARRAYVPROC glScissorArrayv;
  	// PFNGLSCISSORINDEXEDPROC glScissorIndexed;
  	// PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
  	// PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
  	// PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
  	// PFNGLGETFLOATI_VPROC glGetFloati_v;
  	// PFNGLGETDOUBLEI_VPROC glGetDoublei_v;

    int _p_init_gl_41(platform_api *api) {
      int pixel_format;
      UINT num_formats;
      // p_log("running _p_init_gl_41\n");
      wglChoosePixelFormat = (PFNWGLCHOOSEPIXELFORMATARBPROC)wglGetProcAddress("wglChoosePixelFormatARB");
      wglCreateContextAttribs = (PFNWGLCREATECONTEXTATTRIBSARBPROC)wglGetProcAddress("wglCreateContextAttribsARB");
      // wglGetCurrentContext = (PFNWGLGETCURRENTCONTEXTARBPROC)wglGetProcAddress("wglGetCurrentContextARB");
      // wglMakeCurrent = (PFNWGLMAKECURRENTPROC)wglGetProcAddress("wglMakeCurrentARB");
      p_log("initting opengl 1.0 api "); // should be already included in Windows
      // opengl 1.0
      // glCullFace = (PFNGLCULLFACEPROC)wglGetProcAddress("glCullFace");
      // glFrontFace = (PFNGLFRONTFACEPROC)wglGetProcAddress("glFrontFace");
      // glHint = (PFNGLHINTPROC)wglGetProcAddress("glHint");
      // glLineWidth = (PFNGLLINEWIDTHPROC)wglGetProcAddress("glLineWidth");
      // glPointSize = (PFNGLPOINTSIZEPROC)wglGetProcAddress("glPointSize");
      // glPolygonMode = (PFNGLPOLYGONMODEPROC)wglGetProcAddress("glPolygonMode");
      // glScissor = (PFNGLSCISSORPROC)wglGetProcAddress("glScissor");
      // glTexParameterf = (PFNGLTEXPARAMETERFPROC)wglGetProcAddress("glTexParameterf");
      // glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)wglGetProcAddress("glTexParameterfv");
      // glTexParameteri = (PFNGLTEXPARAMETERIPROC)wglGetProcAddress("glTexParameteri");
      // glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)wglGetProcAddress("glTexParameteriv");
      // glTexImage1D = (PFNGLTEXIMAGE1DPROC)wglGetProcAddress("glTexImage1D");
      // glTexImage2D = (PFNGLTEXIMAGE2DPROC)wglGetProcAddress("glTexImage2D");
      // glDrawBuffer = (PFNGLDRAWBUFFERPROC)wglGetProcAddress("glDrawBuffer");
      // glClear = (PFNGLCLEARPROC)wglGetProcAddress("glClear");
      // glClearColor = (PFNGLCLEARCOLORPROC)wglGetProcAddress("glClearColor");
      // glClearStencil = (PFNGLCLEARSTENCILPROC)wglGetProcAddress("glClearStencil");
      // glClearDepth = (PFNGLCLEARDEPTHPROC)wglGetProcAddress("glClearDepth");
      // glStencilMask = (PFNGLSTENCILMASKPROC)wglGetProcAddress("glStencilMask");
      // glColorMask = (PFNGLCOLORMASKPROC)wglGetProcAddress("glColorMask");
      // glDepthMask = (PFNGLDEPTHMASKPROC)wglGetProcAddress("glDepthMask");
      // glDisable = (PFNGLDISABLEPROC)wglGetProcAddress("glDisable");
      // glEnable = (PFNGLENABLEPROC)wglGetProcAddress("glEnable");
      // glFinish = (PFNGLFINISHPROC)wglGetProcAddress("glFinish");
      // glFlush = (PFNGLFLUSHPROC)wglGetProcAddress("glFlush");
      // glBlendFunc = (PFNGLBLENDFUNCPROC)wglGetProcAddress("glBlendFunc");
      // glLogicOp = (PFNGLLOGICOPPROC)wglGetProcAddress("glLogicOp");
      // glStencilFunc = (PFNGLSTENCILFUNCPROC)wglGetProcAddress("glStencilFunc");
      // glStencilOp = (PFNGLSTENCILOPPROC)wglGetProcAddress("glStencilOp");
      // glDepthFunc = (PFNGLDEPTHFUNCPROC)wglGetProcAddress("glDepthFunc");
      // glPixelStoref = (PFNGLPIXELSTOREFPROC)wglGetProcAddress("glPixelStoref");
      // glPixelStorei = (PFNGLPIXELSTOREIPROC)wglGetProcAddress("glPixelStorei");
      // glReadBuffer = (PFNGLREADBUFFERPROC)wglGetProcAddress("glReadBuffer");
      // glReadPixels = (PFNGLREADPIXELSPROC)wglGetProcAddress("glReadPixels");
      // glGetBooleanv = (PFNGLGETBOOLEANVPROC)wglGetProcAddress("glGetBooleanv");
      // glGetDoublev = (PFNGLGETDOUBLEVPROC)wglGetProcAddress("glGetDoublev");
      // glGetError = (PFNGLGETERRORPROC)wglGetProcAddress("glGetError");
      // glGetFloatv = (PFNGLGETFLOATVPROC)wglGetProcAddress("glGetFloatv");
      // glGetIntegerv = (PFNGLGETINTEGERVPROC)wglGetProcAddress("glGetIntegerv");
      // glGetString = (PFNGLGETSTRINGPROC)wglGetProcAddress("glGetString");
      // glGetTexImage = (PFNGLGETTEXIMAGEPROC)wglGetProcAddress("glGetTexImage");
      // glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)wglGetProcAddress("glGetTexParameterfv");
      // glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)wglGetProcAddress("glGetTexParameteriv");
      // glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)wglGetProcAddress("glGetTexLevelParameterfv");
      // glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)wglGetProcAddress("glGetTexLevelParameteriv");
      // glIsEnabled = (PFNGLISENABLEDPROC)wglGetProcAddress("glIsEnabled");
      // glDepthRange = (PFNGLDEPTHRANGEPROC)wglGetProcAddress("glDepthRange");
      // glViewport = (PFNGLVIEWPORTPROC)wglGetProcAddress("glViewport");
      // glNewList = (PFNGLNEWLISTPROC)wglGetProcAddress("glNewList");
      // glEndList = (PFNGLENDLISTPROC)wglGetProcAddress("glEndList");
      // glCallList = (PFNGLCALLLISTPROC)wglGetProcAddress("glCallList");
      // glCallLists = (PFNGLCALLLISTSPROC)wglGetProcAddress("glCallLists");
      // glDeleteLists = (PFNGLDELETELISTSPROC)wglGetProcAddress("glDeleteLists");
      // glGenLists = (PFNGLGENLISTSPROC)wglGetProcAddress("glGenLists");
      // glListBase = (PFNGLLISTBASEPROC)wglGetProcAddress("glListBase");
      // glBegin = (PFNGLBEGINPROC)wglGetProcAddress("glBegin");
      // glBitmap = (PFNGLBITMAPPROC)wglGetProcAddress("glBitmap");
      // glColor3b = (PFNGLCOLOR3BPROC)wglGetProcAddress("glColor3b");
      // glColor3bv = (PFNGLCOLOR3BVPROC)wglGetProcAddress("glColor3bv");
      // glColor3d = (PFNGLCOLOR3DPROC)wglGetProcAddress("glColor3d");
      // glColor3dv = (PFNGLCOLOR3DVPROC)wglGetProcAddress("glColor3dv");
      // glColor3f = (PFNGLCOLOR3FPROC)wglGetProcAddress("glColor3f");
      // glColor3fv = (PFNGLCOLOR3FVPROC)wglGetProcAddress("glColor3fv");
      // glColor3i = (PFNGLCOLOR3IPROC)wglGetProcAddress("glColor3i");
      // glColor3iv = (PFNGLCOLOR3IVPROC)wglGetProcAddress("glColor3iv");
      // glColor3s = (PFNGLCOLOR3SPROC)wglGetProcAddress("glColor3s");
      // glColor3sv = (PFNGLCOLOR3SVPROC)wglGetProcAddress("glColor3sv");
      // glColor3ub = (PFNGLCOLOR3UBPROC)wglGetProcAddress("glColor3ub");
      // glColor3ubv = (PFNGLCOLOR3UBVPROC)wglGetProcAddress("glColor3ubv");
      // glColor3ui = (PFNGLCOLOR3UIPROC)wglGetProcAddress("glColor3ui");
      // glColor3uiv = (PFNGLCOLOR3UIVPROC)wglGetProcAddress("glColor3uiv");
      // glColor3us = (PFNGLCOLOR3USPROC)wglGetProcAddress("glColor3us");
      // glColor3usv = (PFNGLCOLOR3USVPROC)wglGetProcAddress("glColor3usv");
      // glColor4b = (PFNGLCOLOR4BPROC)wglGetProcAddress("glColor4b");
      // glColor4bv = (PFNGLCOLOR4BVPROC)wglGetProcAddress("glColor4bv");
      // glColor4d = (PFNGLCOLOR4DPROC)wglGetProcAddress("glColor4d");
      // glColor4dv = (PFNGLCOLOR4DVPROC)wglGetProcAddress("glColor4dv");
      // glColor4f = (PFNGLCOLOR4FPROC)wglGetProcAddress("glColor4f");
      // glColor4fv = (PFNGLCOLOR4FVPROC)wglGetProcAddress("glColor4fv");
      // glColor4i = (PFNGLCOLOR4IPROC)wglGetProcAddress("glColor4i");
      // glColor4iv = (PFNGLCOLOR4IVPROC)wglGetProcAddress("glColor4iv");
      // glColor4s = (PFNGLCOLOR4SPROC)wglGetProcAddress("glColor4s");
      // glColor4sv = (PFNGLCOLOR4SVPROC)wglGetProcAddress("glColor4sv");
      // glColor4ub = (PFNGLCOLOR4UBPROC)wglGetProcAddress("glColor4ub");
      // glColor4ubv = (PFNGLCOLOR4UBVPROC)wglGetProcAddress("glColor4ubv");
      // glColor4ui = (PFNGLCOLOR4UIPROC)wglGetProcAddress("glColor4ui");
      // glColor4uiv = (PFNGLCOLOR4UIVPROC)wglGetProcAddress("glColor4uiv");
      // glColor4us = (PFNGLCOLOR4USPROC)wglGetProcAddress("glColor4us");
      // glColor4usv = (PFNGLCOLOR4USVPROC)wglGetProcAddress("glColor4usv");
      // glEdgeFlag = (PFNGLEDGEFLAGPROC)wglGetProcAddress("glEdgeFlag");
      // glEdgeFlagv = (PFNGLEDGEFLAGVPROC)wglGetProcAddress("glEdgeFlagv");
      // glEnd = (PFNGLENDPROC)wglGetProcAddress("glEnd");
      // glIndexd = (PFNGLINDEXDPROC)wglGetProcAddress("glIndexd");
      // glIndexdv = (PFNGLINDEXDVPROC)wglGetProcAddress("glIndexdv");
      // glIndexf = (PFNGLINDEXFPROC)wglGetProcAddress("glIndexf");
      // glIndexfv = (PFNGLINDEXFVPROC)wglGetProcAddress("glIndexfv");
      // glIndexi = (PFNGLINDEXIPROC)wglGetProcAddress("glIndexi");
      // glIndexiv = (PFNGLINDEXIVPROC)wglGetProcAddress("glIndexiv");
      // glIndexs = (PFNGLINDEXSPROC)wglGetProcAddress("glIndexs");
      // glIndexsv = (PFNGLINDEXSVPROC)wglGetProcAddress("glIndexsv");
      // glNormal3b = (PFNGLNORMAL3BPROC)wglGetProcAddress("glNormal3b");
      // glNormal3bv = (PFNGLNORMAL3BVPROC)wglGetProcAddress("glNormal3bv");
      // glNormal3d = (PFNGLNORMAL3DPROC)wglGetProcAddress("glNormal3d");
      // glNormal3dv = (PFNGLNORMAL3DVPROC)wglGetProcAddress("glNormal3dv");
      // glNormal3f = (PFNGLNORMAL3FPROC)wglGetProcAddress("glNormal3f");
      // glNormal3fv = (PFNGLNORMAL3FVPROC)wglGetProcAddress("glNormal3fv");
      // glNormal3i = (PFNGLNORMAL3IPROC)wglGetProcAddress("glNormal3i");
      // glNormal3iv = (PFNGLNORMAL3IVPROC)wglGetProcAddress("glNormal3iv");
      // glNormal3s = (PFNGLNORMAL3SPROC)wglGetProcAddress("glNormal3s");
      // glNormal3sv = (PFNGLNORMAL3SVPROC)wglGetProcAddress("glNormal3sv");
      // glRasterPos2d = (PFNGLRASTERPOS2DPROC)wglGetProcAddress("glRasterPos2d");
      // glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)wglGetProcAddress("glRasterPos2dv");
      // glRasterPos2f = (PFNGLRASTERPOS2FPROC)wglGetProcAddress("glRasterPos2f");
      // glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)wglGetProcAddress("glRasterPos2fv");
      // glRasterPos2i = (PFNGLRASTERPOS2IPROC)wglGetProcAddress("glRasterPos2i");
      // glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)wglGetProcAddress("glRasterPos2iv");
      // glRasterPos2s = (PFNGLRASTERPOS2SPROC)wglGetProcAddress("glRasterPos2s");
      // glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)wglGetProcAddress("glRasterPos2sv");
      // glRasterPos3d = (PFNGLRASTERPOS3DPROC)wglGetProcAddress("glRasterPos3d");
      // glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)wglGetProcAddress("glRasterPos3dv");
      // glRasterPos3f = (PFNGLRASTERPOS3FPROC)wglGetProcAddress("glRasterPos3f");
      // glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)wglGetProcAddress("glRasterPos3fv");
      // glRasterPos3i = (PFNGLRASTERPOS3IPROC)wglGetProcAddress("glRasterPos3i");
      // glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)wglGetProcAddress("glRasterPos3iv");
      // glRasterPos3s = (PFNGLRASTERPOS3SPROC)wglGetProcAddress("glRasterPos3s");
      // glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)wglGetProcAddress("glRasterPos3sv");
      // glRasterPos4d = (PFNGLRASTERPOS4DPROC)wglGetProcAddress("glRasterPos4d");
      // glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)wglGetProcAddress("glRasterPos4dv");
      // glRasterPos4f = (PFNGLRASTERPOS4FPROC)wglGetProcAddress("glRasterPos4f");
      // glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)wglGetProcAddress("glRasterPos4fv");
      // glRasterPos4i = (PFNGLRASTERPOS4IPROC)wglGetProcAddress("glRasterPos4i");
      // glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)wglGetProcAddress("glRasterPos4iv");
      // glRasterPos4s = (PFNGLRASTERPOS4SPROC)wglGetProcAddress("glRasterPos4s");
      // glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)wglGetProcAddress("glRasterPos4sv");
      // glRectd = (PFNGLRECTDPROC)wglGetProcAddress("glRectd");
      // glRectdv = (PFNGLRECTDVPROC)wglGetProcAddress("glRectdv");
      // glRectf = (PFNGLRECTFPROC)wglGetProcAddress("glRectf");
      // glRectfv = (PFNGLRECTFVPROC)wglGetProcAddress("glRectfv");
      // glRecti = (PFNGLRECTIPROC)wglGetProcAddress("glRecti");
      // glRectiv = (PFNGLRECTIVPROC)wglGetProcAddress("glRectiv");
      // glRects = (PFNGLRECTSPROC)wglGetProcAddress("glRects");
      // glRectsv = (PFNGLRECTSVPROC)wglGetProcAddress("glRectsv");
      // glTexCoord1d = (PFNGLTEXCOORD1DPROC)wglGetProcAddress("glTexCoord1d");
      // glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)wglGetProcAddress("glTexCoord1dv");
      // glTexCoord1f = (PFNGLTEXCOORD1FPROC)wglGetProcAddress("glTexCoord1f");
      // glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)wglGetProcAddress("glTexCoord1fv");
      // glTexCoord1i = (PFNGLTEXCOORD1IPROC)wglGetProcAddress("glTexCoord1i");
      // glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)wglGetProcAddress("glTexCoord1iv");
      // glTexCoord1s = (PFNGLTEXCOORD1SPROC)wglGetProcAddress("glTexCoord1s");
      // glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)wglGetProcAddress("glTexCoord1sv");
      // glTexCoord2d = (PFNGLTEXCOORD2DPROC)wglGetProcAddress("glTexCoord2d");
      // glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)wglGetProcAddress("glTexCoord2dv");
      // glTexCoord2f = (PFNGLTEXCOORD2FPROC)wglGetProcAddress("glTexCoord2f");
      // glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)wglGetProcAddress("glTexCoord2fv");
      // glTexCoord2i = (PFNGLTEXCOORD2IPROC)wglGetProcAddress("glTexCoord2i");
      // glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)wglGetProcAddress("glTexCoord2iv");
      // glTexCoord2s = (PFNGLTEXCOORD2SPROC)wglGetProcAddress("glTexCoord2s");
      // glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)wglGetProcAddress("glTexCoord2sv");
      // glTexCoord3d = (PFNGLTEXCOORD3DPROC)wglGetProcAddress("glTexCoord3d");
      // glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)wglGetProcAddress("glTexCoord3dv");
      // glTexCoord3f = (PFNGLTEXCOORD3FPROC)wglGetProcAddress("glTexCoord3f");
      // glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)wglGetProcAddress("glTexCoord3fv");
      // glTexCoord3i = (PFNGLTEXCOORD3IPROC)wglGetProcAddress("glTexCoord3i");
      // glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)wglGetProcAddress("glTexCoord3iv");
      // glTexCoord3s = (PFNGLTEXCOORD3SPROC)wglGetProcAddress("glTexCoord3s");
      // glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)wglGetProcAddress("glTexCoord3sv");
      // glTexCoord4d = (PFNGLTEXCOORD4DPROC)wglGetProcAddress("glTexCoord4d");
      // glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)wglGetProcAddress("glTexCoord4dv");
      // glTexCoord4f = (PFNGLTEXCOORD4FPROC)wglGetProcAddress("glTexCoord4f");
      // glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)wglGetProcAddress("glTexCoord4fv");
      // glTexCoord4i = (PFNGLTEXCOORD4IPROC)wglGetProcAddress("glTexCoord4i");
      // glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)wglGetProcAddress("glTexCoord4iv");
      // glTexCoord4s = (PFNGLTEXCOORD4SPROC)wglGetProcAddress("glTexCoord4s");
      // glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)wglGetProcAddress("glTexCoord4sv");
      // glVertex2d = (PFNGLVERTEX2DPROC)wglGetProcAddress("glVertex2d");
      // glVertex2dv = (PFNGLVERTEX2DVPROC)wglGetProcAddress("glVertex2dv");
      // glVertex2f = (PFNGLVERTEX2FPROC)wglGetProcAddress("glVertex2f");
      // glVertex2fv = (PFNGLVERTEX2FVPROC)wglGetProcAddress("glVertex2fv");
      // glVertex2i = (PFNGLVERTEX2IPROC)wglGetProcAddress("glVertex2i");
      // glVertex2iv = (PFNGLVERTEX2IVPROC)wglGetProcAddress("glVertex2iv");
      // glVertex2s = (PFNGLVERTEX2SPROC)wglGetProcAddress("glVertex2s");
      // glVertex2sv = (PFNGLVERTEX2SVPROC)wglGetProcAddress("glVertex2sv");
      // glVertex3d = (PFNGLVERTEX3DPROC)wglGetProcAddress("glVertex3d");
      // glVertex3dv = (PFNGLVERTEX3DVPROC)wglGetProcAddress("glVertex3dv");
      // glVertex3f = (PFNGLVERTEX3FPROC)wglGetProcAddress("glVertex3f");
      // glVertex3fv = (PFNGLVERTEX3FVPROC)wglGetProcAddress("glVertex3fv");
      // glVertex3i = (PFNGLVERTEX3IPROC)wglGetProcAddress("glVertex3i");
      // glVertex3iv = (PFNGLVERTEX3IVPROC)wglGetProcAddress("glVertex3iv");
      // glVertex3s = (PFNGLVERTEX3SPROC)wglGetProcAddress("glVertex3s");
      // glVertex3sv = (PFNGLVERTEX3SVPROC)wglGetProcAddress("glVertex3sv");
      // glVertex4d = (PFNGLVERTEX4DPROC)wglGetProcAddress("glVertex4d");
      // glVertex4dv = (PFNGLVERTEX4DVPROC)wglGetProcAddress("glVertex4dv");
      // glVertex4f = (PFNGLVERTEX4FPROC)wglGetProcAddress("glVertex4f");
      // glVertex4fv = (PFNGLVERTEX4FVPROC)wglGetProcAddress("glVertex4fv");
      // glVertex4i = (PFNGLVERTEX4IPROC)wglGetProcAddress("glVertex4i");
      // glVertex4iv = (PFNGLVERTEX4IVPROC)wglGetProcAddress("glVertex4iv");
      // glVertex4s = (PFNGLVERTEX4SPROC)wglGetProcAddress("glVertex4s");
      // glVertex4sv = (PFNGLVERTEX4SVPROC)wglGetProcAddress("glVertex4sv");
      // glClipPlane = (PFNGLCLIPPLANEPROC)wglGetProcAddress("glClipPlane");
      // glColorMaterial = (PFNGLCOLORMATERIALPROC)wglGetProcAddress("glColorMaterial");
      // glFogf = (PFNGLFOGFPROC)wglGetProcAddress("glFogf");
      // glFogfv = (PFNGLFOGFVPROC)wglGetProcAddress("glFogfv");
      // glFogi = (PFNGLFOGIPROC)wglGetProcAddress("glFogi");
      // glFogiv = (PFNGLFOGIVPROC)wglGetProcAddress("glFogiv");
      // glLightf = (PFNGLLIGHTFPROC)wglGetProcAddress("glLightf");
      // glLightfv = (PFNGLLIGHTFVPROC)wglGetProcAddress("glLightfv");
      // glLighti = (PFNGLLIGHTIPROC)wglGetProcAddress("glLighti");
      // glLightiv = (PFNGLLIGHTIVPROC)wglGetProcAddress("glLightiv");
      // glLightModelf = (PFNGLLIGHTMODELFPROC)wglGetProcAddress("glLightModelf");
      // glLightModelfv = (PFNGLLIGHTMODELFVPROC)wglGetProcAddress("glLightModelfv");
      // glLightModeli = (PFNGLLIGHTMODELIPROC)wglGetProcAddress("glLightModeli");
      // glLightModeliv = (PFNGLLIGHTMODELIVPROC)wglGetProcAddress("glLightModeliv");
      // glLineStipple = (PFNGLLINESTIPPLEPROC)wglGetProcAddress("glLineStipple");
      // glMaterialf = (PFNGLMATERIALFPROC)wglGetProcAddress("glMaterialf");
      // glMaterialfv = (PFNGLMATERIALFVPROC)wglGetProcAddress("glMaterialfv");
      // glMateriali = (PFNGLMATERIALIPROC)wglGetProcAddress("glMateriali");
      // glMaterialiv = (PFNGLMATERIALIVPROC)wglGetProcAddress("glMaterialiv");
      // glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)wglGetProcAddress("glPolygonStipple");
      // glShadeModel = (PFNGLSHADEMODELPROC)wglGetProcAddress("glShadeModel");
      // glTexEnvf = (PFNGLTEXENVFPROC)wglGetProcAddress("glTexEnvf");
      // glTexEnvfv = (PFNGLTEXENVFVPROC)wglGetProcAddress("glTexEnvfv");
      // glTexEnvi = (PFNGLTEXENVIPROC)wglGetProcAddress("glTexEnvi");
      // glTexEnviv = (PFNGLTEXENVIVPROC)wglGetProcAddress("glTexEnviv");
      // glTexGend = (PFNGLTEXGENDPROC)wglGetProcAddress("glTexGend");
      // glTexGendv = (PFNGLTEXGENDVPROC)wglGetProcAddress("glTexGendv");
      // glTexGenf = (PFNGLTEXGENFPROC)wglGetProcAddress("glTexGenf");
      // glTexGenfv = (PFNGLTEXGENFVPROC)wglGetProcAddress("glTexGenfv");
      // glTexGeni = (PFNGLTEXGENIPROC)wglGetProcAddress("glTexGeni");
      // glTexGeniv = (PFNGLTEXGENIVPROC)wglGetProcAddress("glTexGeniv");
      // glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)wglGetProcAddress("glFeedbackBuffer");
      // glSelectBuffer = (PFNGLSELECTBUFFERPROC)wglGetProcAddress("glSelectBuffer");
      // glRenderMode = (PFNGLRENDERMODEPROC)wglGetProcAddress("glRenderMode");
      // glInitNames = (PFNGLINITNAMESPROC)wglGetProcAddress("glInitNames");
      // glLoadName = (PFNGLLOADNAMEPROC)wglGetProcAddress("glLoadName");
      // glPassThrough = (PFNGLPASSTHROUGHPROC)wglGetProcAddress("glPassThrough");
      // glPopName = (PFNGLPOPNAMEPROC)wglGetProcAddress("glPopName");
      // glPushName = (PFNGLPUSHNAMEPROC)wglGetProcAddress("glPushName");
      // glClearAccum = (PFNGLCLEARACCUMPROC)wglGetProcAddress("glClearAccum");
      // glClearIndex = (PFNGLCLEARINDEXPROC)wglGetProcAddress("glClearIndex");
      // glIndexMask = (PFNGLINDEXMASKPROC)wglGetProcAddress("glIndexMask");
      // glAccum = (PFNGLACCUMPROC)wglGetProcAddress("glAccum");
      // glPopAttrib = (PFNGLPOPATTRIBPROC)wglGetProcAddress("glPopAttrib");
      // glPushAttrib = (PFNGLPUSHATTRIBPROC)wglGetProcAddress("glPushAttrib");
      // glMap1d = (PFNGLMAP1DPROC)wglGetProcAddress("glMap1d");
      // glMap1f = (PFNGLMAP1FPROC)wglGetProcAddress("glMap1f");
      // glMap2d = (PFNGLMAP2DPROC)wglGetProcAddress("glMap2d");
      // glMap2f = (PFNGLMAP2FPROC)wglGetProcAddress("glMap2f");
      // glMapGrid1d = (PFNGLMAPGRID1DPROC)wglGetProcAddress("glMapGrid1d");
      // glMapGrid1f = (PFNGLMAPGRID1FPROC)wglGetProcAddress("glMapGrid1f");
      // glMapGrid2d = (PFNGLMAPGRID2DPROC)wglGetProcAddress("glMapGrid2d");
      // glMapGrid2f = (PFNGLMAPGRID2FPROC)wglGetProcAddress("glMapGrid2f");
      // glEvalCoord1d = (PFNGLEVALCOORD1DPROC)wglGetProcAddress("glEvalCoord1d");
      // glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)wglGetProcAddress("glEvalCoord1dv");
      // glEvalCoord1f = (PFNGLEVALCOORD1FPROC)wglGetProcAddress("glEvalCoord1f");
      // glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)wglGetProcAddress("glEvalCoord1fv");
      // glEvalCoord2d = (PFNGLEVALCOORD2DPROC)wglGetProcAddress("glEvalCoord2d");
      // glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)wglGetProcAddress("glEvalCoord2dv");
      // glEvalCoord2f = (PFNGLEVALCOORD2FPROC)wglGetProcAddress("glEvalCoord2f");
      // glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)wglGetProcAddress("glEvalCoord2fv");
      // glEvalMesh1 = (PFNGLEVALMESH1PROC)wglGetProcAddress("glEvalMesh1");
      // glEvalPoint1 = (PFNGLEVALPOINT1PROC)wglGetProcAddress("glEvalPoint1");
      // glEvalMesh2 = (PFNGLEVALMESH2PROC)wglGetProcAddress("glEvalMesh2");
      // glEvalPoint2 = (PFNGLEVALPOINT2PROC)wglGetProcAddress("glEvalPoint2");
      // glAlphaFunc = (PFNGLALPHAFUNCPROC)wglGetProcAddress("glAlphaFunc");
      // glPixelZoom = (PFNGLPIXELZOOMPROC)wglGetProcAddress("glPixelZoom");
      // glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)wglGetProcAddress("glPixelTransferf");
      // glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)wglGetProcAddress("glPixelTransferi");
      // glPixelMapfv = (PFNGLPIXELMAPFVPROC)wglGetProcAddress("glPixelMapfv");
      // glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)wglGetProcAddress("glPixelMapuiv");
      // glPixelMapusv = (PFNGLPIXELMAPUSVPROC)wglGetProcAddress("glPixelMapusv");
      // glCopyPixels = (PFNGLCOPYPIXELSPROC)wglGetProcAddress("glCopyPixels");
      // glDrawPixels = (PFNGLDRAWPIXELSPROC)wglGetProcAddress("glDrawPixels");
      // glGetClipPlane = (PFNGLGETCLIPPLANEPROC)wglGetProcAddress("glGetClipPlane");
      // glGetLightfv = (PFNGLGETLIGHTFVPROC)wglGetProcAddress("glGetLightfv");
      // glGetLightiv = (PFNGLGETLIGHTIVPROC)wglGetProcAddress("glGetLightiv");
      // glGetMapdv = (PFNGLGETMAPDVPROC)wglGetProcAddress("glGetMapdv");
      // glGetMapfv = (PFNGLGETMAPFVPROC)wglGetProcAddress("glGetMapfv");
      // glGetMapiv = (PFNGLGETMAPIVPROC)wglGetProcAddress("glGetMapiv");
      // glGetMaterialfv = (PFNGLGETMATERIALFVPROC)wglGetProcAddress("glGetMaterialfv");
      // glGetMaterialiv = (PFNGLGETMATERIALIVPROC)wglGetProcAddress("glGetMaterialiv");
      // glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)wglGetProcAddress("glGetPixelMapfv");
      // glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)wglGetProcAddress("glGetPixelMapuiv");
      // glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)wglGetProcAddress("glGetPixelMapusv");
      // glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)wglGetProcAddress("glGetPolygonStipple");
      // glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)wglGetProcAddress("glGetTexEnvfv");
      // glGetTexEnviv = (PFNGLGETTEXENVIVPROC)wglGetProcAddress("glGetTexEnviv");
      // glGetTexGendv = (PFNGLGETTEXGENDVPROC)wglGetProcAddress("glGetTexGendv");
      // glGetTexGenfv = (PFNGLGETTEXGENFVPROC)wglGetProcAddress("glGetTexGenfv");
      // glGetTexGeniv = (PFNGLGETTEXGENIVPROC)wglGetProcAddress("glGetTexGeniv");
      // glIsList = (PFNGLISLISTPROC)wglGetProcAddress("glIsList");
      // glFrustum = (PFNGLFRUSTUMPROC)wglGetProcAddress("glFrustum");
      // glLoadIdentity = (PFNGLLOADIDENTITYPROC)wglGetProcAddress("glLoadIdentity");
      // glLoadMatrixf = (PFNGLLOADMATRIXFPROC)wglGetProcAddress("glLoadMatrixf");
      // glLoadMatrixd = (PFNGLLOADMATRIXDPROC)wglGetProcAddress("glLoadMatrixd");
      // glMatrixMode = (PFNGLMATRIXMODEPROC)wglGetProcAddress("glMatrixMode");
      // glMultMatrixf = (PFNGLMULTMATRIXFPROC)wglGetProcAddress("glMultMatrixf");
      // glMultMatrixd = (PFNGLMULTMATRIXDPROC)wglGetProcAddress("glMultMatrixd");
      // glOrtho = (PFNGLORTHOPROC)wglGetProcAddress("glOrtho");
      // glPopMatrix = (PFNGLPOPMATRIXPROC)wglGetProcAddress("glPopMatrix");
      // glPushMatrix = (PFNGLPUSHMATRIXPROC)wglGetProcAddress("glPushMatrix");
      // glRotated = (PFNGLROTATEDPROC)wglGetProcAddress("glRotated");
      // glRotatef = (PFNGLROTATEFPROC)wglGetProcAddress("glRotatef");
      // glScaled = (PFNGLSCALEDPROC)wglGetProcAddress("glScaled");
      // glScalef = (PFNGLSCALEFPROC)wglGetProcAddress("glScalef");
      // glTranslated = (PFNGLTRANSLATEDPROC)wglGetProcAddress("glTranslated");
      // glTranslatef = (PFNGLTRANSLATEFPROC)wglGetProcAddress("glTranslatef");

      p_log("...1.1 "); // should be already included in Windows
      // opengl 1.1
      // glDrawArrays = (PFNGLDRAWARRAYSPROC)wglGetProcAddress("glDrawArrays");
      // glDrawElements = (PFNGLDRAWELEMENTSPROC)wglGetProcAddress("glDrawElements");
      // glGetPointerv = (PFNGLGETPOINTERVPROC)wglGetProcAddress("glGetPointerv");
      // glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)wglGetProcAddress("glPolygonOffset");
      // glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)wglGetProcAddress("glCopyTexImage1D");
      // glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)wglGetProcAddress("glCopyTexImage2D");
      // glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)wglGetProcAddress("glCopyTexSubImage1D");
      // glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)wglGetProcAddress("glCopyTexSubImage2D");
      // glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)wglGetProcAddress("glTexSubImage1D");
      // glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)wglGetProcAddress("glTexSubImage2D");
      // glBindTexture = (PFNGLBINDTEXTUREPROC)wglGetProcAddress("glBindTexture");
      // glDeleteTextures = (PFNGLDELETETEXTURESPROC)wglGetProcAddress("glDeleteTextures");
      // glGenTextures = (PFNGLGENTEXTURESPROC)wglGetProcAddress("glGenTextures");
      // glIsTexture = (PFNGLISTEXTUREPROC)wglGetProcAddress("glIsTexture");
      // glArrayElement = (PFNGLARRAYELEMENTPROC)wglGetProcAddress("glArrayElement");
      // glColorPointer = (PFNGLCOLORPOINTERPROC)wglGetProcAddress("glColorPointer");
      // glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)wglGetProcAddress("glDisableClientState");
      // glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)wglGetProcAddress("glEdgeFlagPointer");
      // glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)wglGetProcAddress("glEnableClientState");
      // glIndexPointer = (PFNGLINDEXPOINTERPROC)wglGetProcAddress("glIndexPointer");
      // glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)wglGetProcAddress("glInterleavedArrays");
      // glNormalPointer = (PFNGLNORMALPOINTERPROC)wglGetProcAddress("glNormalPointer");
      // glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)wglGetProcAddress("glTexCoordPointer");
      // glVertexPointer = (PFNGLVERTEXPOINTERPROC)wglGetProcAddress("glVertexPointer");
      // glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)wglGetProcAddress("glAreTexturesResident");
      // glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)wglGetProcAddress("glPrioritizeTextures");
      // glIndexub = (PFNGLINDEXUBPROC)wglGetProcAddress("glIndexub");
      // glIndexubv = (PFNGLINDEXUBVPROC)wglGetProcAddress("glIndexubv");
      // glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)wglGetProcAddress("glPopClientAttrib");
      // glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)wglGetProcAddress("glPushClientAttrib");

      p_log("...1.2 ");
      // opengl 1.2
      glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)wglGetProcAddress("glDrawRangeElements");
      glTexImage3D = (PFNGLTEXIMAGE3DPROC)wglGetProcAddress("glTexImage3D");
      glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)wglGetProcAddress("glTexSubImage3D");
      glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)wglGetProcAddress("glCopyTexSubImage3D");

      p_log("...1.3 ");
      // opengl 1.3
      glActiveTexture = (PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture");
      glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)wglGetProcAddress("glSampleCoverage");
      glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)wglGetProcAddress("glCompressedTexImage3D");
      glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)wglGetProcAddress("glCompressedTexImage2D");
      glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)wglGetProcAddress("glCompressedTexImage1D");
      glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)wglGetProcAddress("glCompressedTexSubImage3D");
      glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)wglGetProcAddress("glCompressedTexSubImage2D");
      glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)wglGetProcAddress("glCompressedTexSubImage1D");
      glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)wglGetProcAddress("glGetCompressedTexImage");
      glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)wglGetProcAddress("glClientActiveTexture");
      glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)wglGetProcAddress("glMultiTexCoord1d");
      glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)wglGetProcAddress("glMultiTexCoord1dv");
      glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)wglGetProcAddress("glMultiTexCoord1f");
      glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)wglGetProcAddress("glMultiTexCoord1fv");
      glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)wglGetProcAddress("glMultiTexCoord1i");
      glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)wglGetProcAddress("glMultiTexCoord1iv");
      glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)wglGetProcAddress("glMultiTexCoord1s");
      glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)wglGetProcAddress("glMultiTexCoord1sv");
      glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)wglGetProcAddress("glMultiTexCoord2d");
      glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)wglGetProcAddress("glMultiTexCoord2dv");
      glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)wglGetProcAddress("glMultiTexCoord2f");
      glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)wglGetProcAddress("glMultiTexCoord2fv");
      glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)wglGetProcAddress("glMultiTexCoord2i");
      glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)wglGetProcAddress("glMultiTexCoord2iv");
      glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)wglGetProcAddress("glMultiTexCoord2s");
      glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)wglGetProcAddress("glMultiTexCoord2sv");
      glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)wglGetProcAddress("glMultiTexCoord3d");
      glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)wglGetProcAddress("glMultiTexCoord3dv");
      glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)wglGetProcAddress("glMultiTexCoord3f");
      glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)wglGetProcAddress("glMultiTexCoord3fv");
      glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)wglGetProcAddress("glMultiTexCoord3i");
      glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)wglGetProcAddress("glMultiTexCoord3iv");
      glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)wglGetProcAddress("glMultiTexCoord3s");
      glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)wglGetProcAddress("glMultiTexCoord3sv");
      glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)wglGetProcAddress("glMultiTexCoord4d");
      glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)wglGetProcAddress("glMultiTexCoord4dv");
      glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)wglGetProcAddress("glMultiTexCoord4f");
      glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)wglGetProcAddress("glMultiTexCoord4fv");
      glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)wglGetProcAddress("glMultiTexCoord4i");
      glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)wglGetProcAddress("glMultiTexCoord4iv");
      glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)wglGetProcAddress("glMultiTexCoord4s");
      glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)wglGetProcAddress("glMultiTexCoord4sv");
      glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)wglGetProcAddress("glLoadTransposeMatrixf");
      glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)wglGetProcAddress("glLoadTransposeMatrixd");
      glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)wglGetProcAddress("glMultTransposeMatrixf");
      glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)wglGetProcAddress("glMultTransposeMatrixd");

      p_log("...1.4 ");
      // opengl 1.4
      glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)wglGetProcAddress("glBlendFuncSeparate");
      glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)wglGetProcAddress("glMultiDrawArrays");
      glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)wglGetProcAddress("glMultiDrawElements");
      glPointParameterf = (PFNGLPOINTPARAMETERFPROC)wglGetProcAddress("glPointParameterf");
      glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)wglGetProcAddress("glPointParameterfv");
      glPointParameteri = (PFNGLPOINTPARAMETERIPROC)wglGetProcAddress("glPointParameteri");
      glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)wglGetProcAddress("glPointParameteriv");
      glFogCoordf = (PFNGLFOGCOORDFPROC)wglGetProcAddress("glFogCoordf");
      glFogCoordfv = (PFNGLFOGCOORDFVPROC)wglGetProcAddress("glFogCoordfv");
      glFogCoordd = (PFNGLFOGCOORDDPROC)wglGetProcAddress("glFogCoordd");
      glFogCoorddv = (PFNGLFOGCOORDDVPROC)wglGetProcAddress("glFogCoorddv");
      glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)wglGetProcAddress("glFogCoordPointer");
      glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)wglGetProcAddress("glSecondaryColor3b");
      glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)wglGetProcAddress("glSecondaryColor3bv");
      glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)wglGetProcAddress("glSecondaryColor3d");
      glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)wglGetProcAddress("glSecondaryColor3dv");
      glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)wglGetProcAddress("glSecondaryColor3f");
      glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)wglGetProcAddress("glSecondaryColor3fv");
      glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)wglGetProcAddress("glSecondaryColor3i");
      glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)wglGetProcAddress("glSecondaryColor3iv");
      glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)wglGetProcAddress("glSecondaryColor3s");
      glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)wglGetProcAddress("glSecondaryColor3sv");
      glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)wglGetProcAddress("glSecondaryColor3ub");
      glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)wglGetProcAddress("glSecondaryColor3ubv");
      glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)wglGetProcAddress("glSecondaryColor3ui");
      glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)wglGetProcAddress("glSecondaryColor3uiv");
      glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)wglGetProcAddress("glSecondaryColor3us");
      glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)wglGetProcAddress("glSecondaryColor3usv");
      glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)wglGetProcAddress("glSecondaryColorPointer");
      glWindowPos2d = (PFNGLWINDOWPOS2DPROC)wglGetProcAddress("glWindowPos2d");
      glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)wglGetProcAddress("glWindowPos2dv");
      glWindowPos2f = (PFNGLWINDOWPOS2FPROC)wglGetProcAddress("glWindowPos2f");
      glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)wglGetProcAddress("glWindowPos2fv");
      glWindowPos2i = (PFNGLWINDOWPOS2IPROC)wglGetProcAddress("glWindowPos2i");
      glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)wglGetProcAddress("glWindowPos2iv");
      glWindowPos2s = (PFNGLWINDOWPOS2SPROC)wglGetProcAddress("glWindowPos2s");
      glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)wglGetProcAddress("glWindowPos2sv");
      glWindowPos3d = (PFNGLWINDOWPOS3DPROC)wglGetProcAddress("glWindowPos3d");
      glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)wglGetProcAddress("glWindowPos3dv");
      glWindowPos3f = (PFNGLWINDOWPOS3FPROC)wglGetProcAddress("glWindowPos3f");
      glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)wglGetProcAddress("glWindowPos3fv");
      glWindowPos3i = (PFNGLWINDOWPOS3IPROC)wglGetProcAddress("glWindowPos3i");
      glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)wglGetProcAddress("glWindowPos3iv");
      glWindowPos3s = (PFNGLWINDOWPOS3SPROC)wglGetProcAddress("glWindowPos3s");
      glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)wglGetProcAddress("glWindowPos3sv");
      glBlendColor = (PFNGLBLENDCOLORPROC)wglGetProcAddress("glBlendColor");
      glBlendEquation = (PFNGLBLENDEQUATIONPROC)wglGetProcAddress("glBlendEquation");

      p_log("...1.5 ");
      // opengl 1.5
      glGenQueries = (PFNGLGENQUERIESPROC)wglGetProcAddress("glGenQueries");
      glDeleteQueries = (PFNGLDELETEQUERIESPROC)wglGetProcAddress("glDeleteQueries");
      glIsQuery = (PFNGLISQUERYPROC)wglGetProcAddress("glIsQuery");
      glBeginQuery = (PFNGLBEGINQUERYPROC)wglGetProcAddress("glBeginQuery");
      glEndQuery = (PFNGLENDQUERYPROC)wglGetProcAddress("glEndQuery");
      glGetQueryiv = (PFNGLGETQUERYIVPROC)wglGetProcAddress("glGetQueryiv");
      glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)wglGetProcAddress("glGetQueryObjectiv");
      glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)wglGetProcAddress("glGetQueryObjectuiv");
      glBindBuffer = (PFNGLBINDBUFFERPROC)wglGetProcAddress("glBindBuffer");
      glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)wglGetProcAddress("glDeleteBuffers");
      glGenBuffers = (PFNGLGENBUFFERSPROC)wglGetProcAddress("glGenBuffers");
      glIsBuffer = (PFNGLISBUFFERPROC)wglGetProcAddress("glIsBuffer");
      glBufferData = (PFNGLBUFFERDATAPROC)wglGetProcAddress("glBufferData");
      glBufferSubData = (PFNGLBUFFERSUBDATAPROC)wglGetProcAddress("glBufferSubData");
      glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)wglGetProcAddress("glGetBufferSubData");
      glMapBuffer = (PFNGLMAPBUFFERPROC)wglGetProcAddress("glMapBuffer");
      glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)wglGetProcAddress("glUnmapBuffer");
      glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)wglGetProcAddress("glGetBufferParameteriv");
      glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)wglGetProcAddress("glGetBufferPointerv");

      p_log("...2.0 ");
      //opengl 2.0
      glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)wglGetProcAddress("glBlendEquationSeparate");
      glDrawBuffers = (PFNGLDRAWBUFFERSPROC)wglGetProcAddress("glDrawBuffers");
      glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)wglGetProcAddress("glStencilOpSeparate");
      glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)wglGetProcAddress("glStencilFuncSeparate");
      glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)wglGetProcAddress("glStencilMaskSeparate");
      glAttachShader = (PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader");
      glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)wglGetProcAddress("glBindAttribLocation");
      glCompileShader = (PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader");
      glCreateProgram = (PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram");
      glCreateShader = (PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader");
      glDeleteProgram = (PFNGLDELETEPROGRAMPROC)wglGetProcAddress("glDeleteProgram");
      glDeleteShader = (PFNGLDELETESHADERPROC)wglGetProcAddress("glDeleteShader");
      glDetachShader = (PFNGLDETACHSHADERPROC)wglGetProcAddress("glDetachShader");
      glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glDisableVertexAttribArray");
      glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glEnableVertexAttribArray");
      glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)wglGetProcAddress("glGetActiveAttrib");
      glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)wglGetProcAddress("glGetActiveUniform");
      glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)wglGetProcAddress("glGetAttachedShaders");
      glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)wglGetProcAddress("glGetAttribLocation");
      glGetProgramiv = (PFNGLGETPROGRAMIVPROC)wglGetProcAddress("glGetProgramiv");
      glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)wglGetProcAddress("glGetProgramInfoLog");
      glGetShaderiv = (PFNGLGETSHADERIVPROC)wglGetProcAddress("glGetShaderiv");
      glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)wglGetProcAddress("glGetShaderInfoLog");
      glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)wglGetProcAddress("glGetShaderSource");
      glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)wglGetProcAddress("glGetUniformLocation");
      glGetUniformfv = (PFNGLGETUNIFORMFVPROC)wglGetProcAddress("glGetUniformfv");
      glGetUniformiv = (PFNGLGETUNIFORMIVPROC)wglGetProcAddress("glGetUniformiv");
      glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)wglGetProcAddress("glGetVertexAttribdv");
      glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)wglGetProcAddress("glGetVertexAttribfv");
      glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)wglGetProcAddress("glGetVertexAttribiv");
      glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)wglGetProcAddress("glGetVertexAttribPointerv");
      glIsProgram = (PFNGLISPROGRAMPROC)wglGetProcAddress("glIsProgram");
      glIsShader = (PFNGLISSHADERPROC)wglGetProcAddress("glIsShader");
      glLinkProgram = (PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram");
      glShaderSource = (PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource");
      glUseProgram = (PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram");
      glUniform1f = (PFNGLUNIFORM1FPROC)wglGetProcAddress("glUniform1f");
      glUniform2f = (PFNGLUNIFORM2FPROC)wglGetProcAddress("glUniform2f");
      glUniform3f = (PFNGLUNIFORM3FPROC)wglGetProcAddress("glUniform3f");
      glUniform4f = (PFNGLUNIFORM4FPROC)wglGetProcAddress("glUniform4f");
      glUniform1i = (PFNGLUNIFORM1IPROC)wglGetProcAddress("glUniform1i");
      glUniform2i = (PFNGLUNIFORM2IPROC)wglGetProcAddress("glUniform2i");
      glUniform3i = (PFNGLUNIFORM3IPROC)wglGetProcAddress("glUniform3i");
      glUniform4i = (PFNGLUNIFORM4IPROC)wglGetProcAddress("glUniform4i");
      glUniform1fv = (PFNGLUNIFORM1FVPROC)wglGetProcAddress("glUniform1fv");
      glUniform2fv = (PFNGLUNIFORM2FVPROC)wglGetProcAddress("glUniform2fv");
      glUniform3fv = (PFNGLUNIFORM3FVPROC)wglGetProcAddress("glUniform3fv");
      glUniform4fv = (PFNGLUNIFORM4FVPROC)wglGetProcAddress("glUniform4fv");
      glUniform1iv = (PFNGLUNIFORM1IVPROC)wglGetProcAddress("glUniform1iv");
      glUniform2iv = (PFNGLUNIFORM2IVPROC)wglGetProcAddress("glUniform2iv");
      glUniform3iv = (PFNGLUNIFORM3IVPROC)wglGetProcAddress("glUniform3iv");
      glUniform4iv = (PFNGLUNIFORM4IVPROC)wglGetProcAddress("glUniform4iv");
      glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)wglGetProcAddress("glUniformMatrix2fv");
      glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)wglGetProcAddress("glUniformMatrix3fv");
      glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)wglGetProcAddress("glUniformMatrix4fv");
      glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)wglGetProcAddress("glValidateProgram");
      glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)wglGetProcAddress("glVertexAttrib1d");
      glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)wglGetProcAddress("glVertexAttrib1dv");
      glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)wglGetProcAddress("glVertexAttrib1f");
      glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)wglGetProcAddress("glVertexAttrib1fv");
      glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)wglGetProcAddress("glVertexAttrib1s");
      glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)wglGetProcAddress("glVertexAttrib1sv");
      glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)wglGetProcAddress("glVertexAttrib2d");
      glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)wglGetProcAddress("glVertexAttrib2dv");
      glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)wglGetProcAddress("glVertexAttrib2f");
      glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)wglGetProcAddress("glVertexAttrib2fv");
      glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)wglGetProcAddress("glVertexAttrib2s");
      glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)wglGetProcAddress("glVertexAttrib2sv");
      glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)wglGetProcAddress("glVertexAttrib3d");
      glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)wglGetProcAddress("glVertexAttrib3dv");
      glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)wglGetProcAddress("glVertexAttrib3f");
      glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)wglGetProcAddress("glVertexAttrib3fv");
      glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)wglGetProcAddress("glVertexAttrib3s");
      glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)wglGetProcAddress("glVertexAttrib3sv");
      glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)wglGetProcAddress("glVertexAttrib4Nbv");
      glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)wglGetProcAddress("glVertexAttrib4Niv");
      glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)wglGetProcAddress("glVertexAttrib4Nsv");
      glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)wglGetProcAddress("glVertexAttrib4Nub");
      glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)wglGetProcAddress("glVertexAttrib4Nubv");
      glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)wglGetProcAddress("glVertexAttrib4Nuiv");
      glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)wglGetProcAddress("glVertexAttrib4Nusv");
      glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)wglGetProcAddress("glVertexAttrib4bv");
      glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)wglGetProcAddress("glVertexAttrib4d");
      glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)wglGetProcAddress("glVertexAttrib4dv");
      glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)wglGetProcAddress("glVertexAttrib4f");
      glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)wglGetProcAddress("glVertexAttrib4fv");
      glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)wglGetProcAddress("glVertexAttrib4iv");
      glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)wglGetProcAddress("glVertexAttrib4s");
      glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)wglGetProcAddress("glVertexAttrib4sv");
      glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)wglGetProcAddress("glVertexAttrib4ubv");
      glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)wglGetProcAddress("glVertexAttrib4uiv");
      glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)wglGetProcAddress("glVertexAttrib4usv");
      glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)wglGetProcAddress("glVertexAttribPointer");

      p_log("...2.1 ");
      //opengl 2.1
      glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)wglGetProcAddress("glUniformMatrix2x3fv");
      glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)wglGetProcAddress("glUniformMatrix3x2fv");
      glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)wglGetProcAddress("glUniformMatrix2x4fv");
      glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)wglGetProcAddress("glUniformMatrix4x2fv");
      glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)wglGetProcAddress("glUniformMatrix3x4fv");
      glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)wglGetProcAddress("glUniformMatrix4x3fv");

      p_log("...3.0 ");
      //opengl 3.0
      // glColorMaski = (PFNGLCOLORMASKIPROC)wglGetProcAddress("glColorMaski");
      glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)wglGetProcAddress("glGetBooleani_v");
      glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)wglGetProcAddress("glGetIntegeri_v");
      glEnablei = (PFNGLENABLEIPROC)wglGetProcAddress("glEnablei");
      glDisablei = (PFNGLDISABLEIPROC)wglGetProcAddress("glDisablei");
      glIsEnabledi = (PFNGLISENABLEDIPROC)wglGetProcAddress("glIsEnabledi");
      glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)wglGetProcAddress("glBeginTransformFeedback");
      glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)wglGetProcAddress("glEndTransformFeedback");
      glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)wglGetProcAddress("glBindBufferRange");
      glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)wglGetProcAddress("glBindBufferBase");
      glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)wglGetProcAddress("glTransformFeedbackVaryings");
      glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)wglGetProcAddress("glGetTransformFeedbackVarying");
      glClampColor = (PFNGLCLAMPCOLORPROC)wglGetProcAddress("glClampColor");
      glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)wglGetProcAddress("glBeginConditionalRender");
      glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)wglGetProcAddress("glEndConditionalRender");
      glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)wglGetProcAddress("glVertexAttribIPointer");
      glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)wglGetProcAddress("glGetVertexAttribIiv");
      glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)wglGetProcAddress("glGetVertexAttribIuiv");
      glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)wglGetProcAddress("glVertexAttribI1i");
      glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)wglGetProcAddress("glVertexAttribI2i");
      glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)wglGetProcAddress("glVertexAttribI3i");
      glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)wglGetProcAddress("glVertexAttribI4i");
      glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)wglGetProcAddress("glVertexAttribI1ui");
      glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)wglGetProcAddress("glVertexAttribI2ui");
      glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)wglGetProcAddress("glVertexAttribI3ui");
      glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)wglGetProcAddress("glVertexAttribI4ui");
      glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)wglGetProcAddress("glVertexAttribI1iv");
      glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)wglGetProcAddress("glVertexAttribI2iv");
      glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)wglGetProcAddress("glVertexAttribI3iv");
      glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)wglGetProcAddress("glVertexAttribI4iv");
      glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)wglGetProcAddress("glVertexAttribI1uiv");
      glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)wglGetProcAddress("glVertexAttribI2uiv");
      glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)wglGetProcAddress("glVertexAttribI3uiv");
      glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)wglGetProcAddress("glVertexAttribI4uiv");
      glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)wglGetProcAddress("glVertexAttribI4bv");
      glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)wglGetProcAddress("glVertexAttribI4sv");
      glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)wglGetProcAddress("glVertexAttribI4ubv");
      glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)wglGetProcAddress("glVertexAttribI4usv");
      glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)wglGetProcAddress("glGetUniformuiv");
      glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)wglGetProcAddress("glBindFragDataLocation");
      glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)wglGetProcAddress("glGetFragDataLocation");
      glUniform1ui = (PFNGLUNIFORM1UIPROC)wglGetProcAddress("glUniform1ui");
      glUniform2ui = (PFNGLUNIFORM2UIPROC)wglGetProcAddress("glUniform2ui");
      glUniform3ui = (PFNGLUNIFORM3UIPROC)wglGetProcAddress("glUniform3ui");
      glUniform4ui = (PFNGLUNIFORM4UIPROC)wglGetProcAddress("glUniform4ui");
      glUniform1uiv = (PFNGLUNIFORM1UIVPROC)wglGetProcAddress("glUniform1uiv");
      glUniform2uiv = (PFNGLUNIFORM2UIVPROC)wglGetProcAddress("glUniform2uiv");
      glUniform3uiv = (PFNGLUNIFORM3UIVPROC)wglGetProcAddress("glUniform3uiv");
      glUniform4uiv = (PFNGLUNIFORM4UIVPROC)wglGetProcAddress("glUniform4uiv");
      glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)wglGetProcAddress("glTexParameterIiv");
      glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)wglGetProcAddress("glTexParameterIuiv");
      glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)wglGetProcAddress("glGetTexParameterIiv");
      glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)wglGetProcAddress("glGetTexParameterIuiv");
      glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)wglGetProcAddress("glClearBufferiv");
      glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)wglGetProcAddress("glClearBufferuiv");
      glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)wglGetProcAddress("glClearBufferfv");
      glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)wglGetProcAddress("glClearBufferfi");
      glGetStringi = (PFNGLGETSTRINGIPROC)wglGetProcAddress("glGetStringi");
      glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)wglGetProcAddress("glIsRenderbuffer");
      glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)wglGetProcAddress("glBindRenderbuffer");
      glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)wglGetProcAddress("glDeleteRenderbuffers");
      glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)wglGetProcAddress("glGenRenderbuffers");
      glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)wglGetProcAddress("glRenderbufferStorage");
      glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)wglGetProcAddress("glGetRenderbufferParameteriv");
      glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)wglGetProcAddress("glIsFramebuffer");
      glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)wglGetProcAddress("glBindFramebuffer");
      glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)wglGetProcAddress("glDeleteFramebuffers");
      glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)wglGetProcAddress("glGenFramebuffers");
      glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)wglGetProcAddress("glCheckFramebufferStatus");
      glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)wglGetProcAddress("glFramebufferTexture1D");
      glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)wglGetProcAddress("glFramebufferTexture2D");
      glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)wglGetProcAddress("glFramebufferTexture3D");
      glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)wglGetProcAddress("glFramebufferRenderbuffer");
      glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)wglGetProcAddress("glGetFramebufferAttachmentParameteriv");
      glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)wglGetProcAddress("glGenerateMipmap");
      glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)wglGetProcAddress("glBlitFramebuffer");
      glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)wglGetProcAddress("glRenderbufferStorageMultisample");
      glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)wglGetProcAddress("glFramebufferTextureLayer");
      glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)wglGetProcAddress("glMapBufferRange");
      glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)wglGetProcAddress("glFlushMappedBufferRange");
      glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)wglGetProcAddress("glBindVertexArray");
      glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)wglGetProcAddress("glDeleteVertexArrays");
      glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)wglGetProcAddress("glGenVertexArrays");
      glIsVertexArray = (PFNGLISVERTEXARRAYPROC)wglGetProcAddress("glIsVertexArray");

      p_log("...3.1 ");
      // opengl 3.1
      glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)wglGetProcAddress("glDrawArraysInstanced");
      glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)wglGetProcAddress("glDrawElementsInstanced");
      glTexBuffer = (PFNGLTEXBUFFERPROC)wglGetProcAddress("glTexBuffer");
      glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)wglGetProcAddress("glPrimitiveRestartIndex");
      glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)wglGetProcAddress("glCopyBufferSubData");
      glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)wglGetProcAddress("glGetUniformIndices");
      glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)wglGetProcAddress("glGetActiveUniformsiv");
      glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)wglGetProcAddress("glGetActiveUniformName");
      glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)wglGetProcAddress("glGetUniformBlockIndex");
      glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)wglGetProcAddress("glGetActiveUniformBlockiv");
      glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)wglGetProcAddress("glGetActiveUniformBlockName");
      glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)wglGetProcAddress("glUniformBlockBinding");
      glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)wglGetProcAddress("glBindBufferRange");
      glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)wglGetProcAddress("glBindBufferBase");
      glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)wglGetProcAddress("glGetIntegeri_v");

      p_log("...3.2 ");
      //opengl 3.2
      glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)wglGetProcAddress("glDrawElementsBaseVertex");
      glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)wglGetProcAddress("glDrawRangeElementsBaseVertex");
      glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)wglGetProcAddress("glDrawElementsInstancedBaseVertex");
      glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)wglGetProcAddress("glMultiDrawElementsBaseVertex");
      glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)wglGetProcAddress("glProvokingVertex");
      glFenceSync = (PFNGLFENCESYNCPROC)wglGetProcAddress("glFenceSync");
      glIsSync = (PFNGLISSYNCPROC)wglGetProcAddress("glIsSync");
      glDeleteSync = (PFNGLDELETESYNCPROC)wglGetProcAddress("glDeleteSync");
      glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)wglGetProcAddress("glClientWaitSync");
      glWaitSync = (PFNGLWAITSYNCPROC)wglGetProcAddress("glWaitSync");
      glGetInteger64v = (PFNGLGETINTEGER64VPROC)wglGetProcAddress("glGetInteger64v");
      glGetSynciv = (PFNGLGETSYNCIVPROC)wglGetProcAddress("glGetSynciv");
      glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)wglGetProcAddress("glGetInteger64i_v");
      glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)wglGetProcAddress("glGetBufferParameteri64v");
      glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)wglGetProcAddress("glFramebufferTexture");
      glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)wglGetProcAddress("glTexImage2DMultisample");
      glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)wglGetProcAddress("glTexImage3DMultisample");
      glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)wglGetProcAddress("glGetMultisamplefv");
      glSampleMaski = (PFNGLSAMPLEMASKIPROC)wglGetProcAddress("glSampleMaski");

      p_log("...3.3 ");
      //opengl 3.3
      glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)wglGetProcAddress("glBindFragDataLocationIndexed");
      glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)wglGetProcAddress("glGetFragDataIndex");
      glGenSamplers = (PFNGLGENSAMPLERSPROC)wglGetProcAddress("glGenSamplers");
      glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)wglGetProcAddress("glDeleteSamplers");
      glIsSampler = (PFNGLISSAMPLERPROC)wglGetProcAddress("glIsSampler");
      glBindSampler = (PFNGLBINDSAMPLERPROC)wglGetProcAddress("glBindSampler");
      glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)wglGetProcAddress("glSamplerParameteri");
      glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)wglGetProcAddress("glSamplerParameteriv");
      glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)wglGetProcAddress("glSamplerParameterf");
      glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)wglGetProcAddress("glSamplerParameterfv");
      glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)wglGetProcAddress("glSamplerParameterIiv");
      glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)wglGetProcAddress("glSamplerParameterIuiv");
      glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)wglGetProcAddress("glGetSamplerParameteriv");
      glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)wglGetProcAddress("glGetSamplerParameterIiv");
      glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)wglGetProcAddress("glGetSamplerParameterfv");
      glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)wglGetProcAddress("glGetSamplerParameterIuiv");
      glQueryCounter = (PFNGLQUERYCOUNTERPROC)wglGetProcAddress("glQueryCounter");
      glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)wglGetProcAddress("glGetQueryObjecti64v");
      glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)wglGetProcAddress("glGetQueryObjectui64v");
      glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)wglGetProcAddress("glVertexAttribDivisor");
      glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)wglGetProcAddress("glVertexAttribP1ui");
      glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)wglGetProcAddress("glVertexAttribP1uiv");
      glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)wglGetProcAddress("glVertexAttribP2ui");
      glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)wglGetProcAddress("glVertexAttribP2uiv");
      glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)wglGetProcAddress("glVertexAttribP3ui");
      glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)wglGetProcAddress("glVertexAttribP3uiv");
      glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)wglGetProcAddress("glVertexAttribP4ui");
      glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)wglGetProcAddress("glVertexAttribP4uiv");
      glVertexP2ui = (PFNGLVERTEXP2UIPROC)wglGetProcAddress("glVertexP2ui");
      glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)wglGetProcAddress("glVertexP2uiv");
      glVertexP3ui = (PFNGLVERTEXP3UIPROC)wglGetProcAddress("glVertexP3ui");
      glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)wglGetProcAddress("glVertexP3uiv");
      glVertexP4ui = (PFNGLVERTEXP4UIPROC)wglGetProcAddress("glVertexP4ui");
      glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)wglGetProcAddress("glVertexP4uiv");
      glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)wglGetProcAddress("glTexCoordP1ui");
      glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)wglGetProcAddress("glTexCoordP1uiv");
      glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)wglGetProcAddress("glTexCoordP2ui");
      glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)wglGetProcAddress("glTexCoordP2uiv");
      glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)wglGetProcAddress("glTexCoordP3ui");
      glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)wglGetProcAddress("glTexCoordP3uiv");
      glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)wglGetProcAddress("glTexCoordP4ui");
      glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)wglGetProcAddress("glTexCoordP4uiv");
      glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)wglGetProcAddress("glMultiTexCoordP1ui");
      glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)wglGetProcAddress("glMultiTexCoordP1uiv");
      glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)wglGetProcAddress("glMultiTexCoordP2ui");
      glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)wglGetProcAddress("glMultiTexCoordP2uiv");
      glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)wglGetProcAddress("glMultiTexCoordP3ui");
      glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)wglGetProcAddress("glMultiTexCoordP3uiv");
      glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)wglGetProcAddress("glMultiTexCoordP4ui");
      glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)wglGetProcAddress("glMultiTexCoordP4uiv");
      glNormalP3ui = (PFNGLNORMALP3UIPROC)wglGetProcAddress("glNormalP3ui");
      glNormalP3uiv = (PFNGLNORMALP3UIVPROC)wglGetProcAddress("glNormalP3uiv");
      glColorP3ui = (PFNGLCOLORP3UIPROC)wglGetProcAddress("glColorP3ui");
      glColorP3uiv = (PFNGLCOLORP3UIVPROC)wglGetProcAddress("glColorP3uiv");
      glColorP4ui = (PFNGLCOLORP4UIPROC)wglGetProcAddress("glColorP4ui");
      glColorP4uiv = (PFNGLCOLORP4UIVPROC)wglGetProcAddress("glColorP4uiv");
      glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)wglGetProcAddress("glSecondaryColorP3ui");
      glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)wglGetProcAddress("glSecondaryColorP3uiv");

      p_log("...4.0 ");
      //opengl 4.0
      glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)wglGetProcAddress("glMinSampleShading");
      glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)wglGetProcAddress("glBlendEquationi");
      glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)wglGetProcAddress("glBlendEquationSeparatei");
      glBlendFunci = (PFNGLBLENDFUNCIPROC)wglGetProcAddress("glBlendFunci");
      glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)wglGetProcAddress("glBlendFuncSeparatei");
      glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)wglGetProcAddress("glDrawArraysIndirect");
      glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)wglGetProcAddress("glDrawElementsIndirect");
      glUniform1d = (PFNGLUNIFORM1DPROC)wglGetProcAddress("glUniform1d");
      glUniform2d = (PFNGLUNIFORM2DPROC)wglGetProcAddress("glUniform2d");
      glUniform3d = (PFNGLUNIFORM3DPROC)wglGetProcAddress("glUniform3d");
      glUniform4d = (PFNGLUNIFORM4DPROC)wglGetProcAddress("glUniform4d");
      glUniform1dv = (PFNGLUNIFORM1DVPROC)wglGetProcAddress("glUniform1dv");
      glUniform2dv = (PFNGLUNIFORM2DVPROC)wglGetProcAddress("glUniform2dv");
      glUniform3dv = (PFNGLUNIFORM3DVPROC)wglGetProcAddress("glUniform3dv");
      glUniform4dv = (PFNGLUNIFORM4DVPROC)wglGetProcAddress("glUniform4dv");
      glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)wglGetProcAddress("glUniformMatrix2dv");
      glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)wglGetProcAddress("glUniformMatrix3dv");
      glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)wglGetProcAddress("glUniformMatrix4dv");
      glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)wglGetProcAddress("glUniformMatrix2x3dv");
      glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)wglGetProcAddress("glUniformMatrix2x4dv");
      glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)wglGetProcAddress("glUniformMatrix3x2dv");
      glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)wglGetProcAddress("glUniformMatrix3x4dv");
      glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)wglGetProcAddress("glUniformMatrix4x2dv");
      glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)wglGetProcAddress("glUniformMatrix4x3dv");
      glGetUniformdv = (PFNGLGETUNIFORMDVPROC)wglGetProcAddress("glGetUniformdv");
      glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)wglGetProcAddress("glGetSubroutineUniformLocation");
      glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)wglGetProcAddress("glGetSubroutineIndex");
      glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)wglGetProcAddress("glGetActiveSubroutineUniformiv");
      glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)wglGetProcAddress("glGetActiveSubroutineUniformName");
      glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)wglGetProcAddress("glGetActiveSubroutineName");
      glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)wglGetProcAddress("glUniformSubroutinesuiv");
      glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)wglGetProcAddress("glGetUniformSubroutineuiv");
      glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)wglGetProcAddress("glGetProgramStageiv");
      glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)wglGetProcAddress("glPatchParameteri");
      glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)wglGetProcAddress("glPatchParameterfv");
      glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)wglGetProcAddress("glBindTransformFeedback");
      glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)wglGetProcAddress("glDeleteTransformFeedbacks");
      glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)wglGetProcAddress("glGenTransformFeedbacks");
      glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)wglGetProcAddress("glIsTransformFeedback");
      glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)wglGetProcAddress("glPauseTransformFeedback");
      glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)wglGetProcAddress("glResumeTransformFeedback");
      glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)wglGetProcAddress("glDrawTransformFeedback");
      glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)wglGetProcAddress("glDrawTransformFeedbackStream");
      glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)wglGetProcAddress("glBeginQueryIndexed");
      glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)wglGetProcAddress("glEndQueryIndexed");
      glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)wglGetProcAddress("glGetQueryIndexediv");

      p_log("...4.1 ");
      //opengl 4.1
      glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)wglGetProcAddress("glReleaseShaderCompiler");
      glShaderBinary = (PFNGLSHADERBINARYPROC)wglGetProcAddress("glShaderBinary");
      glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)wglGetProcAddress("glGetShaderPrecisionFormat");
      glDepthRangef = (PFNGLDEPTHRANGEFPROC)wglGetProcAddress("glDepthRangef");
      glClearDepthf = (PFNGLCLEARDEPTHFPROC)wglGetProcAddress("glClearDepthf");
      glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)wglGetProcAddress("glGetProgramBinary");
      glProgramBinary = (PFNGLPROGRAMBINARYPROC)wglGetProcAddress("glProgramBinary");
      glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)wglGetProcAddress("glProgramParameteri");
      glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)wglGetProcAddress("glUseProgramStages");
      glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)wglGetProcAddress("glActiveShaderProgram");
      glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)wglGetProcAddress("glCreateShaderProgramv");
      glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)wglGetProcAddress("glBindProgramPipeline");
      glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)wglGetProcAddress("glDeleteProgramPipelines");
      glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)wglGetProcAddress("glGenProgramPipelines");
      glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)wglGetProcAddress("glIsProgramPipeline");
      glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)wglGetProcAddress("glGetProgramPipelineiv");
      glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)wglGetProcAddress("glProgramParameteri");
      glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)wglGetProcAddress("glProgramUniform1i");
      glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)wglGetProcAddress("glProgramUniform1iv");
      glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)wglGetProcAddress("glProgramUniform1f");
      glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)wglGetProcAddress("glProgramUniform1fv");
      glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)wglGetProcAddress("glProgramUniform1d");
      glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)wglGetProcAddress("glProgramUniform1dv");
      glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)wglGetProcAddress("glProgramUniform1ui");
      glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)wglGetProcAddress("glProgramUniform1uiv");
      glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)wglGetProcAddress("glProgramUniform2i");
      glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)wglGetProcAddress("glProgramUniform2iv");
      glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)wglGetProcAddress("glProgramUniform2f");
      glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)wglGetProcAddress("glProgramUniform2fv");
      glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)wglGetProcAddress("glProgramUniform2d");
      glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)wglGetProcAddress("glProgramUniform2dv");
      glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)wglGetProcAddress("glProgramUniform2ui");
      glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)wglGetProcAddress("glProgramUniform2uiv");
      glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)wglGetProcAddress("glProgramUniform3i");
      glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)wglGetProcAddress("glProgramUniform3iv");
      glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)wglGetProcAddress("glProgramUniform3f");
      glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)wglGetProcAddress("glProgramUniform3fv");
      glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)wglGetProcAddress("glProgramUniform3d");
      glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)wglGetProcAddress("glProgramUniform3dv");
      glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)wglGetProcAddress("glProgramUniform3ui");
      glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)wglGetProcAddress("glProgramUniform3uiv");
      glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)wglGetProcAddress("glProgramUniform4i");
      glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)wglGetProcAddress("glProgramUniform4iv");
      glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)wglGetProcAddress("glProgramUniform4f");
      glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)wglGetProcAddress("glProgramUniform4fv");
      glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)wglGetProcAddress("glProgramUniform4d");
      glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)wglGetProcAddress("glProgramUniform4dv");
      glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)wglGetProcAddress("glProgramUniform4ui");
      glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)wglGetProcAddress("glProgramUniform4uiv");
      glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)wglGetProcAddress("glProgramUniformMatrix2fv");
      glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)wglGetProcAddress("glProgramUniformMatrix3fv");
      glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)wglGetProcAddress("glProgramUniformMatrix4fv");
      glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)wglGetProcAddress("glProgramUniformMatrix2dv");
      glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)wglGetProcAddress("glProgramUniformMatrix3dv");
      glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)wglGetProcAddress("glProgramUniformMatrix4dv");
      glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)wglGetProcAddress("glProgramUniformMatrix2x3fv");
      glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)wglGetProcAddress("glProgramUniformMatrix3x2fv");
      glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)wglGetProcAddress("glProgramUniformMatrix2x4fv");
      glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)wglGetProcAddress("glProgramUniformMatrix4x2fv");
      glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)wglGetProcAddress("glProgramUniformMatrix3x4fv");
      glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)wglGetProcAddress("glProgramUniformMatrix4x3fv");
      glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)wglGetProcAddress("glProgramUniformMatrix2x3dv");
      glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)wglGetProcAddress("glProgramUniformMatrix3x2dv");
      glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)wglGetProcAddress("glProgramUniformMatrix2x4dv");
      glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)wglGetProcAddress("glProgramUniformMatrix4x2dv");
      glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)wglGetProcAddress("glProgramUniformMatrix3x4dv");
      glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)wglGetProcAddress("glProgramUniformMatrix4x3dv");
      glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)wglGetProcAddress("glValidateProgramPipeline");
      glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)wglGetProcAddress("glGetProgramPipelineInfoLog");
      glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)wglGetProcAddress("glVertexAttribL1d");
      glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)wglGetProcAddress("glVertexAttribL2d");
      glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)wglGetProcAddress("glVertexAttribL3d");
      glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)wglGetProcAddress("glVertexAttribL4d");
      glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)wglGetProcAddress("glVertexAttribL1dv");
      glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)wglGetProcAddress("glVertexAttribL2dv");
      glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)wglGetProcAddress("glVertexAttribL3dv");
      glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)wglGetProcAddress("glVertexAttribL4dv");
      glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)wglGetProcAddress("glVertexAttribLPointer");
      glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)wglGetProcAddress("glGetVertexAttribLdv");
      glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)wglGetProcAddress("glViewportArrayv");
      glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)wglGetProcAddress("glViewportIndexedf");
      glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)wglGetProcAddress("glViewportIndexedfv");
      glScissorArrayv = (PFNGLSCISSORARRAYVPROC)wglGetProcAddress("glScissorArrayv");
      glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)wglGetProcAddress("glScissorIndexed");
      glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)wglGetProcAddress("glScissorIndexedv");
      glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)wglGetProcAddress("glDepthRangeArrayv");
      glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)wglGetProcAddress("glDepthRangeIndexed");
      glGetFloati_v = (PFNGLGETFLOATI_VPROC)wglGetProcAddress("glGetFloati_v");
      glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)wglGetProcAddress("glGetDoublei_v");

      if(!wglChoosePixelFormat || !wglCreateContextAttribs) {
        if(!wglChoosePixelFormat){
          p_log(RED "No wglChoosePixelFormat!\n");
        }
        if(!wglCreateContextAttribs){
          p_log(RED "No wglCreateContextAttribs!\n");
        }
        p_error(api, "Cannot create OpenGL context.\n");
        return -1;
      }
      const int attribList[] = {WGL_DRAW_TO_WINDOW_ARB,
                                GL_TRUE,
                                WGL_SUPPORT_OPENGL_ARB,
                                GL_TRUE,
                                WGL_DOUBLE_BUFFER_ARB,
                                GL_TRUE,
                                WGL_PIXEL_TYPE_ARB,
                                WGL_TYPE_RGBA_ARB,
                                WGL_COLOR_BITS_ARB,
                                32,
                                WGL_DEPTH_BITS_ARB,
                                24,
                                WGL_STENCIL_BITS_ARB,
                                8,
                                0};
      int attribs[] = {WGL_CONTEXT_MAJOR_VERSION_ARB, 3,
                       WGL_CONTEXT_MINOR_VERSION_ARB, 3,
                       // WGL_CONTEXT_FLAGS_ARB, ,
                       // unavailable on windows:
                       #ifdef __APPLE__
                       WGL_CONTEXT_PROFILE_MASK_ARB, api->opengl.compatibility ? WGL_CONTEXT_CORE_PROFILE_BIT_ARB : WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB),
                       GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE,
                       #endif
                       // GLFW_COCOA_RETINA_FRAMEBUFFER, GL_FALSE,
                       0};
      if(!wglChoosePixelFormat(api->window.dc, attribList, NULL, 1, &pixel_format,
                               &num_formats)) {
        p_error(api, "Cannot choose OpenGL pixel format.\n");
        return -1;
      }
      if(!(api->window.hglrc = wglCreateContextAttribs(api->window.dc, api->window.hglrc, attribs))) {
        p_error(api, "Cannot create OpenGL context attribs.\n");
        return -1;
      }
      if(!wglMakeCurrent(api->window.dc, api->window.hglrc)) {
        p_error(api, "Cannot activate OpenGL context.\n");
        return -1;
      }

      p_log("no errors with opengl init!\n");
      api->window.gl_legacy = 0;
      return 0;
    }
  #endif
#endif
